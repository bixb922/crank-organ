# /20_note_Carl_Frei.json size=891, compressed level=9 wbits=10 compressed size=262
_f4 = const(
  b'(\xcf}\xd2;k\xc30\x10\x00\xe0=\x90\xffpx'\
  b'\x0e\xc1\x0f\xd9\x96\xe7BK\xa6v\x0f\x19TY\xd4\x02'\
  b"[',\x17\x92\x7f_\xa9>C\x06\xe7\xbc\x08N\xdf"\
  b'=t\xf8z<\\\xb3\xde\x04=[\xbfXt\xd9\t'\
  b'\xb22\x07\x87\x8b\x8175\x8f\xf0>\x1b\x0bA\xab\xd1'\
  b'\x9c\xe1\xe3\xeb\xf2\t\xde\xba\x00\xe8\xc6\xc79\xbb\x9dR'\
  b'\xb63\xe8\xed\xdd\x8c1U\xc854Y=\xa3\x1f\xd0'\
  b'\x99T\x8f\xdc\xa2\xf4\x80\x93Y\xcc\xfc\x1c\xc4_=x'\
  b'\xd5\xc7P\x9d")\xf6\xe3-\xfe_C\xfcR\xb1\xde'\
  b'\xc6khRVdU<\xbfU\x08;\xa4%"_'\
  b'\x92\xa2^I\x93\xbf&\xd4\xa8)\xe3\xa9\xb4\xc6\xc9\xef'\
  b' j\xd5T\x1c\x92\x84\x04\x83`C5\x87:B-'\
  b"\xd7.'\xd4q\xa8XQ\x9b\xf0dF\xec\x1f;\xa8"\
  b'$Tr\xa8"$8$\x08\xd5\x0c\x82m\xa6\x86A'\
  b'b\x9b\xa9\xe5\xd0V\xa9\xe3\x10\xedI\x16\x0c\xaah\xe3'\
  b'\x92[\x81\xa0\xbf@r+(i&\xf9\xfc\xba\xe3\xe1'\
  b'\xf6\x07T\xed\xd3@'\
  b'')
# /26_note_Alderman_Wright.json size=1587, compressed level=9 wbits=10 compressed size=344
_f1 = const(
  b'(\xcf\x9d\x92\xb1j\xc30\x10\x86\xf7@\xde\xe1\xd0l'\
  b'ZK\xb6O\xceX2u\x08t(t\x08\x19\\Y'\
  b"\xd4\x02\xdb2\x8e\xd3\xb4o_\xa9\xc9u\x08\xa5'*"\
  b'\xb00\xbf>N\xe8\xee\xdb\xafW{\xd1\xda\xa3\x99\xdd'\
  b'\xb48?\x8aL(\x84\xd1/\x16\x1e\xfa\xd6\xceC3'\
  b'\xde\xefl\xff\xeeFx\x99\xdd[\xb7\xc0\xd14\xbd\xbd'\
  b'\x83\xe7\xb3\x87G\xb5\x85\xd7\xd3\x11lc:8\xbb\xa5'\
  b'\x03?Z\xd8m\x9fT\x91K-\x0eY,>Z?'\
  b'\xb9\x0f\xdb\x8b\x0c\xca\xfa\x12\r\xce\xcc~\xea\x02\x1c\xc3'\
  b'K\xb6\x84\x1a~\xb0\x8b\x9dCV]3\x7f2\xdd\xd4'\
  b'\xb4!\x11\xdf\xd5 \xacx\xe0\x94\t\x99\x94\xe1S\xd7'\
  b'|\x0fb0\xd3\xe5\xe2\x0c\n\x05\xc4\xc7\x15\xafl]'\
  b'\xc8\xf3X)\x03(\x8b\xf03\xd8\xde\xb7\x9f\xe2wR'\
  b'\x12Yq\xa4"\xb2\xe6\xc8\xe2JV9G\x96D*'\
  b'\x8e\xac\x88d_\x84D\x96\x1c\xa9\x89d\xdf^\x13\xa9'\
  b'9rC\xe4\x86\xed<\r\t\xd96I\x9a\x12J\x16'\
  b'\xa51!\xdbRIsB\xb6S\x92\x06\x85l\xab$'\
  b'M\n\xf1\x06\xfd\xf19\x10\x12\xff\xe53\xeaT\x9f\xb1'\
  b'N\xf5\x197\xa9>\xebd\x9f\xb5L\xf5Y\xabT\x9f'\
  b'u\x91\xea\xb3.S}\xd6\x98\xea\xb3\xd6\xc9>\xc7M'\
  b'p&\xff\t\xa9\x14\xa8H\x81\xca\x14\xa8\xba\x81`\xbd'\
  b':\xacW_\x1e3Y\x05'\
  b'')
# /31_note_Raffin.json size=1588, compressed level=9 wbits=10 compressed size=336
_f0 = const(
  b'(\xcf\x8d\x92\xb1j\xc30\x10\x86\xf7@\xde\xe1\xd0l'\
  b'\x8a%\xd9:e\xce\x94\xa1\xb4t\r\x19\\Y\xc1\x02'\
  b'[2\xb6C\xdb\xb7\xaf\x9cXK\t\xd5\t\x0c\xe6\xd7'\
  b'\xc7\xe9\xa4\xfb\xce\xfb\xdd\x99\xb5v6\x93\x1b\x17\x17<'\
  b'+\x98\xe4\xe0\xc3b\xe1\xa3\xb9^\x9d\x87\xd94\xbd}'\
  b'\x817o\xe1$\x8e\xf0y\x9b\xe1\xcb-\x1d\x08x='\
  b'\xbe\x0bYr\x04\x13\xfc2\x85\xbe\xb7\xd3\xcc.\xc5Z'\
  b'\xd1\xdb0\xbao\xdb\xb3\x02*\xfd\x88\x06g\xa60v'\
  b'\xc1\xdb5|dKc\xba0\xd8\xc5N1\xab\xb7,'\
  b'\xdcL76mL\xd8\xbd\x1a\xc4\xb5n8ab\xc6'\
  b'1~z\xcb\xcf\xc0\x063\xde\x9b\x88[R@\xe2\xd7'\
  b'\xb5\x1e\xd9\xba\x98\x97k\xa5\x02\xa0R\xf1g\xb0}h'\
  b"\x7f\xd8s\x92'R\xe7H\xb1\x915\xcf\x912\x912"\
  b"GV\x89\xcc\xf6Y'2\xdb\xa7\xdaHU\xe6HL"\
  b'd\xf6F:\x91"G\x1e\x12\x99\xbd;OCRU'\
  b'\x16MSRu\x16McR\x98E\xd3\x9cT\xf6M'\
  b'y\x1a\x94:d\xd14)|\xf2\xfe\x7f\xec\x95\xff\xdb'\
  b'\x8b\x82j/J\xaa\xbdXQ\xed\xc5\x9aj/\x92\xed'\
  b'E\xa4\xda\x8b\x9aj/\x1e\xa8\xf6\xea\x92j\xaf\xe6d'\
  b'{\xb5 \xdb\xab+\xb2\xbd\xba&\xdb\xab\x15\xd9^\x8d'\
  b'T{\xef8\x8b\x10\xecw\x97\xfd\xee\x17\x0f\xa0^\xfb'\
  b'')
# /35_note_custom.json size=1616, compressed level=9 wbits=10 compressed size=357
_f2 = const(
  b'(\xcf\x95\x92\xc1\x8e\x83 \x10\x86\xef\xfb\x14\xc4s\x0f'\
  b'\x822\xe0\xb3\x98\x1e,\x92\x96\xa4\n\x11\x9bt\xdf~'\
  b'a\x19\x1b\xb7M\xa7\xd9&\xa6f\xf8\x9c\x19?\xff\xbe'\
  b'\xafF\x1b\xcd\xe2\xc2\xea\xfc\\\x1dX\xd5H6\xfb\xd5'\
  b'2s\x8b\xab\x9fX4\xc3\xd5V\xc7\x03\xfb\xea\xab\xd9'\
  b'\xfa\xe0\xee\xf6\x9a\xb0V\x97\xd2\xe4\xcc\xe2\xc3\xc5\xcf6'\
  b'\x15y]\x8a\xeb`.~\xb2\xab]rC|x\xf5'\
  b'7s\t\xc3\x98J]\xa9,\xf6\xec\xe2\x06\x15\xf0m'\
  b'\xf5\x1c\x9c\xcfw,\xfd\xf2\xd4\xd1\xe5yMa\x94H'\
  b'\xff\x93\xbd\xfa\xf1\xfb\x95i\x91\xe1{\x86=Aj\x1b'\
  b'\xb6\xed\xfb\xf7X\x97#\x99{\x9c\x86\x18\x0b\xd2WN'\
  b'\x98|\x9c\xca\\\xec\x9e2A45W\xe9\xa8y\x94'\
  b'w\xed\xea\xd2M\xcb\xd7\x8d\xf6C\x91jHJ\xe0\xdb'\
  b'\xd1\xd4\xe6\xa9&)4\xa59II\xec\xa5H\n\x90'\
  b'\xeaH\n\xb5+\xda\x04\xda\xd7\xf4\xc4\x0e)\xa0\xad\xa2'\
  b'|\xd5\xd2\x18\xdaW\x1f\xba\xa1~\xfd\xa1\x1b\xfa\xd7\xb4'\
  b'\xffGT5\x8d\xe1\x17\xd0\xe2\t{\xe41\x01\x1c\xfe'\
  b'\x9dG\xc8[\x0e\xc6\xf8)\x10y\x84\x96\xa4P\x88\xcc'\
  b'\xafp\x1ab$\xd2(\x81`PE\xb9\xde\xa7P\xd2'\
  b';c\n[j\x12f\xb0\xa56\xc6\x04\x82 \xa7a'\
  b'\x02\x81\xd3\x1e7\xdd\x9a\xc66\xdf5\x8d\xa1p\x904'\
  b'\x86\xce\xa1\xa31\xd4\x0e\x8a\xc6\xd0>\xc0\x0e\xfb\x85\x8e'\
  b'?\xab\x1cq2'\
  b'')
# /48_note_custom.json size=4163, compressed level=9 wbits=10 compressed size=708
_f7 = const(
  b'(\xcf\x95\x92\xcd\x8e\xa30\x10\x84\xefy\n\x94s\x0e'\
  b'\xd8\x80\x7f\xce\xfb\x00;\xf7\xd1\x1c\x18\xc7\x9a %1'\
  b'\n\x99\xd5\xee\xdb\xaf-\x8a\x89!`wFB\xa3\xd8'\
  b'_u\xb5\xbb\xeb}W\xf8\xbf\xf7\xfd\xd1\x0e\xe6\xd6\xf5'\
  b'\xf7\xce]\xf7\x87b_\xab\xe2\xea\xee\xb60\xdf\xc3\xdd'\
  b']\x8a\xc1\xb4g\xbb\xff8\x00\xbeZ\xd7w\x7f\xed\xd9'\
  b'\x93\xb5\xfa9\xbdt\xe6\xe6\xfa\x93\xbbZ\x7f\xce\xca\x9f'\
  b'\xf3{kN\xeeb\xef\xf6\xe6\xcf\xb9\xbf*\x1eW\xee'\
  b'\xdb\x9c\xfa\xf6\xe8/\xf4\xe3\xd0^z\x17J\x97\x87\xa2'\
  b'R\xfe\xbf\xf4W\xb8\xbb\xd9\xafn\x18+\xd5\xcc\xf7\xf9'\
  b'\xd6\x19\xe3\xce\x81~\xf8E\x0c\x0f\xccoso\xff\xd8'\
  b'-\xa4\xd2\x1e\xd9\xba\xac}\xbb\xfb_\xf6l\xfdo0'\
  b'\x80\xbe\xfa\xceM\x03\x99\x9e\x7f\xec\xc2\xc3\xab\xb1\x9e\x0c'\
  b'\xd2\x8b=\xbb\xe3\xbf0\xd0$\xab\xea\x19\x8b\x86W\x15'\
  b'5\xaa3Bu\xb0\xaa"W\x97\xa3\xe2\xf1\xadRj'\
  b'\xbcmB\x0f\x9f\xed0\xc4$\xc6\xd3q\x13HO0'\
  b'>\xafaz^\x95L\x86\xc9\xf3\xb5\xea%\x9an\x08'\
  b'\x0f\\}\xdf*\xca16:\xbah 1\xb5i\xe1'\
  b'e\xbe\xf6\xb4oN\xad=\xad\x90\xb0\xee\x06m\xc8<'\
  b'*\x80\xea<\x8aD\xc8\x86\x8c*I}\x9cZ\x15\xac'\
  b'\xa2\x1a\xa8 \xa4\x02\t\x925\x9d]\xd4M\xf4\xcc\x10'\
  b':I\xe9d\x8a\x12\xa5\x93)\x1a\x84\x141\xa4B*'\
  b'\x02\xdb\xacF.\xb0\xbb\x11\xec\xb8\x01\xc7\xc4\xbc\x82\xe9'\
  b'yU2\x19r\xcb\xa3\x9bY}\x0cP\x84\xf6[c'\
  b'\xdc\xa5_\xb6\xb2\x86/\xe2\xf4<\xef\xf9\x1b\xe0Q\xd3'\
  b'<\xd67\x94\xf1\xc0\xaa\x9a0\xd2\xcfv\x18\x92\x0e\xd8'\
  b'U#(0\x96\xf5\xf8\xb6@l\xaa\xa9(U\xc5\x08'\
  b'\xd7\xa4\x16$`\xd2\xe3\x14\xa6\xcdi\xd3\xd6\xc0\x19q'\
  b'9S`\x14\x91\x9f\x96_\x12y,R4\xaf\xf1R'\
  b'\xbe\x94H$@h\xa2\x0bx\xc5^rAt\x84$'\
  b'\xba\x80\x97\xfa%\x17\xe4N\x08\xa2\x0bx\xa96\\v'\
  b'#\xdeq\x132\xe7\x03\x1dU\xf2UL\xcf\xab\x92I'\
  b'\x7fW\xf1-\x0f\x84D\x87\x96\xfa\xce\xf7tv~S'\
  b'\xc9\xb6 Q\xf5\x93\xe4m\xfc\xb5\xfd (u\xa4\x14'\
  b'\xe9\x11D\x99\x99)rV\x08\x9bVq\x93U\xd2\x0b'\
  b'\x12%\x9e$9\xb3)sq\x972\xe9\x05\x85l\x96'\
  b'\x8a\x9c\x15\x82\xa7\xe2w\xa9\xa4\xd5\x14U\xb1T\xe4\xac'\
  b'\x90>]FB\x9d\xb4\x8a\xf3:S\xe4\xac\x04\xacf'\
  b'\x91bI/H\x14\x7f\x92\xe4\xcc$\xccf\xca2i'\
  b'\x06\x89*\x9f$93\x05\xb3x\xd1\xe9\x18B\xa1\xaa'\
  b'\xa5"g\xa5G\xe1\xe3\xdb\x02Y\x89\xa6t\xfc\x9c\xb4'\
  b'\x84A\x12wU\x93$\x8a-%\xb9\x870\x0e3\x19'\
  b')y\xda\x0c\x12\xd5,%Y\xb3\nfq\x9bM\xda'\
  b'\x0c\x12\xa9\x97\x92\xacYM\xdeQ\xf3D\xee>\xfe\x03'\
  b'\xce\x86\x8d\xb9'\
  b'')
# /64_note_midi_over_serial.json size=2187, compressed level=9 wbits=10 compressed size=427
_f3 = const(
  b'(\xcfu\xd2\xb1n\xc20\x14\x85\xe1\x9d\xa7\xb0\x983'\
  b'\xe4\xc6\xbe\xd7\xf6\xde\x85\xa1O\x80\x18\x10X"\x12$'\
  b'Q\xa0U\x1f\xbf\x81r\xacJ\x1c\x98"\xff\x07\x0f\x9f'\
  b'\xbc]m\xd7\xc7r=\xcc\xfdt\xeb\xc7a\xdd\xb8\xb5'\
  b'\x057\x8c\xb7ru\x9f\x9b\x8f\x8d\x1b\xbf\xcb\xec\xaee'\
  b'\xee\xf7\xe7\xf5\xaeY\xd6C\x19\xa7\xfe\xa7\x9c\x97iH'\
  b'\x8f\x93K\x7f\x98\xc7\xe94\x0e\xe5\xfe\xf7\xbf\xd5m\x7f'\
  b'8\x8d\x97r+\xf3\xbf\xb3\xf1\xebp\x9a\xf6\xc7\xe5D'\
  b'\x97\x03\xb7\xfc\x96\xd3\xe7\xdd\x8ds\xd28i\x1b\xd7\xba'\
  b'g\xbc\xdf|\xec\x97\xd2\xde\xafX\x06!\xdd?^\xb2'\
  b' g\x9a\xbbg\xd6\x96f\x8f,4\x07\xe4\x8efE'\
  b'\xf64\x1br\xa09"+\xcd\t\xd9h\xce\xc8\x91\xb3'\
  b'\x80M\xdf\xb0\xc1M\xb9\x9b\x00\xce8\x9c@\xce\xb8\x9c'\
  b'\x80\xce8\x9d\xc0\xce\xb8\x9d\x00\xcf8\x9e@\xcf\xb8\x9e'\
  b'\x80\xcf8\x9f\xc0\xcf\xb8_\x07?\xe3~\x1d\xfc\xec\xcd'\
  b'\xbb\x83_\xe4~\x1d\xfc"\xf7\xeb\xe0\x17\xb9_\x07\xbf'\
  b'\xf8\xb8\xe8%\x83/\x06\x9a\xa1\x17\x95f\xe0E\xa3\x19'\
  b'v1\xb2\xecA\x17\x13\xcd\x90\x8b\x99f\xc0\xa5\x96f'\
  b'\xb8%\xa1\x19l\xa9\xa3\x19j\x89\xaay\xa8%\xaa\xe6'\
  b'\xa1\x96\xa8\x9a\x87Z\xa2j\x1ej\x89\xaa\x05\xa8%\xfe'\
  b'\xe0\x02\xd8\x12\x7fp\x01n\x99?\xb8\x00\xb8\xcc\x1f\\'\
  b'\x80\\\xe6\x0f.\x80.{\xdea\x97\x03\xef\xc0\xcb\xca'\
  b';\xf4\xb2\xf1\x0e\xbe\x1ciW\xf8e\xee\xa7\xf0\xcb\xdc'\
  b"O\xe1'-\x07T_\x07\\PC\x1dpB\xd5:"\
  b'\xe0\x86ju\xc0\x115\xd6\x01W\xd4T\x07\x9cQs'\
  b'\x1dpGk\xeb\x80C\x9a\xd4\x01\x97\xb4*)\\\xd2'\
  b'\xaa\xa4<%W\xbb_\xb1(\xb1\xf3'\
  b'')
# /drumdef.json size=924, compressed level=9 wbits=10 compressed size=318
_f8 = const(
  b'(\xcf\x8d\xd1Qk\x830\x10\x07\xf0\xf7~\x8a\xc3\xa7'\
  b'\r2\xb0\xea%v\x90\x97\xae\x85\x15\xb6\xb7\xbd\x8dR'\
  b'\xa2\r\xad`"$qe+\xfd\xee\x8bm\x99\xc2\xb4'\
  b"\xd6'\xf5\x7fw\xdc\x8f;N\xc0?A^)%\xb5"\
  b'\x0b\x9e!\x88\x112a-lM\xad\xe0\xe1P\x9b\xb2'\
  b'p?\xd2<\x06\xe4_i\x82PV\x07p\x95\xea\x0b'\
  b'Y\x13>\xa9b;T\x90\xc2\xbe\xd8\xedoU\xcc '\
  b'7\xc2\xee!\xffV\x99(G\xb6\xc1\x10\xac\x16F\xde'\
  b'\xb3y\x8a\x90\x0b\xeb\x84\x96\xce\x8e\x8d\xf5K\x94\xe2K'\
  b'\xdakv)H\x98\xcf\x8e\xe7\xf7\xf3\xb7\x16J6\xd5'\
  b'oW\xf2G\xa5\xe0}\xb5X\xf1\x84\xf1y\xc4\xe7\x84'\
  b'\x80\xab\xb5l\xa4\xb0\xcc\x02\x02m\xeb\xb66\xc2\x15\x95'\
  b'\xf6\xedS$\xed\x7f?\xa6\xd8\x94\x85m\xb6\xf8\xa4S'\
  b'BC\x821AJh\xb4\xee\xf6[g*\xbd\xdbt'\
  b'\xc6DaO\xde\x8c\xb3\xcd(L\xd7\x7f!\x9c\xae`'\
  b'\x0c\xfb=\xaf\xfeB-\x06C\xbe\x88\xf9\xa2c\x99\xdf'\
  b'\xb2\xc0\x10&&\x17\x0f\x8d\x08M\xc61\xc3\x16\x8a\x1d'\
  b'K\x87\xc3\xb0\x9f\xf3r\xbe\xe4\x05\xc3\x90/3\xe4\x1b'\
  b'y\xd7i\xd2a\xcd\x8cPF(\x12\xeaO\x93\x8eh'\
  b'\xa6\xb74,l5\xa7\xc9\xe9\x17\xdc\xf1\xee\xe6'\
  b'')
# /pinout.txt size=27
_f6 = const(
  b'data/20_note_Car'\
  b'l_Frei.json'\
  b'')
# /tunelib.json size=3
_f5 = const(
  b'{}\n'\
  b'')
direntries = const(( ( '/20_note_Carl_Frei.json',  ( _f4, True, 891 ) ),
 ( '/26_note_Alderman_Wright.json',  ( _f1, True, 1587 ) ),
 ( '/31_note_Raffin.json',  ( _f0, True, 1588 ) ),
 ( '/35_note_custom.json',  ( _f2, True, 1616 ) ),
 ( '/48_note_custom.json',  ( _f7, True, 4163 ) ),
 ( '/64_note_midi_over_serial.json',  ( _f3, True, 2187 ) ),
 ( '/drumdef.json',  ( _f8, True, 924 ) ),
 ( '/pinout.txt',  ( _f6, False, 27 ) ),
 ( '/tunelib.json',  ( _f5, False, 3 ) ),
))

version = const(2)
date_frozen = const( '2025/01/29 11:43:02' )

sum_size = const(12986)
files_folders = const(9)
import os
import errno
import sys
class _VerbosePrint:
 def __init__( self, module_name, function, silent ):
  self.silent = silent
  self.prefix = f"{module_name}.{function}"
 def print( self, *args ):
  if not self.silent:
   print( self.prefix, *args )
def _file_exists( filename ):
 try:
  open( filename ).close()
  return True
 except:
  return False
def _extract_file( dir_entry, destination ):
 from io import BytesIO
 data = dir_entry[0]
 if not data:
  return
 buffer = bytearray(256)
 stream = BytesIO( data )
 if dir_entry[1]:
  from deflate import DeflateIO, AUTO
  stream = DeflateIO( stream, AUTO, 0, True )
 with open( destination, "wb" ) as outfile:
  while True:
   n = stream.readinto( buffer )
   if n == 0:
    break
   outfile.write( memoryview( buffer )[0:n] )
 stream.close()
def _create_folder( folder, vp ):   
 path = ""
 for p in folder.split("/"):
  path += "/" + p
  path = path.replace("//", "/" )
  try:
   os.mkdir( path )
   vp.print( f"folder {path} created." )
  except Exception as e:
   if type(e) is not OSError or e.errno != errno.EEXIST:
    vp.print( f"folder {path} not created: ", e )
def _extract_all( direntries, target, overwrite, vp ):
 _create_folder( target, vp )
 for filename, dir_entry in direntries:
  dest = (target + filename).replace("//", "/")
  if dir_entry:
   try:
    if overwrite == "never" and _file_exists( dest ):
     vp.print( f"file {dest} exists, not extracted." )
    else:
     vp.print(  f"extracting file {dest}." )
     _extract_file( dir_entry, dest )
   except Exception as e:
    vp.print( f"file {dest} not copied: {e}." )
    raise
  else:
   _create_folder( dest, vp )
def extract_fs( module_name, target, overwrite, silent ):
 module = __import__( module_name )
 if module_name != "__main__":
  del sys.modules[ module_name ]
 vp = _VerbosePrint( module_name, "extract", silent )
 vp.print( f"extracting files to {target}." )
 _extract_all( direntries, target, overwrite, vp )
 return 
extract_fs( __name__, '/data', 'always', False )