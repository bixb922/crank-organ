# /20_note_Carl_Frei.json size=891, compressed level=9 wbits=10 compressed size=262
_f5 = const(
  b'(\xcf}\xd2;k\xc30\x10\x00\xe0=\x90\xffpx'\
  b'\x0e\xc1\x0f\xd9\x96\xe7BK\xa6v\x0f\x19TY\xd4\x02'\
  b"[',\x17\x92\x7f_\xa9>C\x06\xe7\xbc\x08N\xdf"\
  b'=t\xf8z<\\\xb3\xde\x04=[\xbfXt\xd9\t'\
  b'\xb22\x07\x87\x8b\x8175\x8f\xf0>\x1b\x0bA\xab\xd1'\
  b'\x9c\xe1\xe3\xeb\xf2\t\xde\xba\x00\xe8\xc6\xc79\xbb\x9dR'\
  b'\xb63\xe8\xed\xdd\x8c1U\xc854Y=\xa3\x1f\xd0'\
  b'\x99T\x8f\xdc\xa2\xf4\x80\x93Y\xcc\xfc\x1c\xc4_=x'\
  b'\xd5\xc7P\x9d")\xf6\xe3-\xfe_C\xfcR\xb1\xde'\
  b'\xc6khRVdU<\xbfU\x08;\xa4%"_'\
  b'\x92\xa2^I\x93\xbf&\xd4\xa8)\xe3\xa9\xb4\xc6\xc9\xef'\
  b' j\xd5T\x1c\x92\x84\x04\x83`C5\x87:B-'\
  b"\xd7.'\xd4q\xa8XQ\x9b\xf0dF\xec\x1f;\xa8"\
  b'$Tr\xa8"$8$\x08\xd5\x0c\x82m\xa6\x86A'\
  b'b\x9b\xa9\xe5\xd0V\xa9\xe3\x10\xedI\x16\x0c\xaah\xe3'\
  b'\x92[\x81\xa0\xbf@r+(i&\xf9\xfc\xba\xe3\xe1'\
  b'\xf6\x07T\xed\xd3@'\
  b'')
# /20_note_gpioservo.json size=941, compressed level=9 wbits=10 compressed size=297
_f4 = const(
  b'(\xcf}\xd2Mk\x840\x10\x06\xe0\xfb\xfe\x8a\xc1\xb3'\
  b',\xf1#\x1a\xcf\x0b[zji\x8f\xcb\x1el\x1cj'\
  b'@3\x12mi\xff}\xe3:\xc2\xb6\xd6x00>'\
  b'\xcc\xcc\x1b\xbc\x1c.Q\x83\xa3vf\x98\x0c\xd9(\x86'\
  b'(\x15`iB8\xd5\xae\x83\xb3C\x03\xa3\xae;<'\
  b'\xc2\xcb\t^\xd1}\x12h\xb2\x16\xf5\x84\rL\x04\x0f'\
  b'\xcf\x8fO\xc7\xe8\x1a\xfbF\x16i0_\xd8\xf9.\xb9'\
  b'\xbaUz\xa3\x1d\r-Y\x9c;/j\xaauK='\
  b'N\xe8\xeej\xf4\xa1\xdb\xa1n|E\xfa\x82\xaf\xbc\x0f'\
  b'\x86\xc6y\xda\\\x12B\xc4\x90,\xefT\x08/\xc0?'\
  b's\xfb\xc6\xf8\xefP\xcc\x8d\xbc\xcb\xfc\xf9V\x8fc\xb4'\
  b"\x11%\x0b\xb5'\x12\xb9\x88B\xec\n\x9eR\xa4\xfe\xac"\
  b'\xb5\xa6~\xd8\x1a\x9eSd\x01\xa3\xd8\xe4\xbf\xcc\x9f\xc8'\
  b'r\x89,o\x91\xe56\xf2\xdaD\xee\x0f\x82\x8aM\xf9'\
  b'\xcf\xa0\xedZ\x82u\x15X=YL9\xdb\x1e;j'\
  b'\xbe\xb7&e\x93\x06L\xc6&\x0f\x98\x9c\x8d\xdc7\xb0'\
  b'\xeeS\xec\x9b|\xdd\xa7\x0c\x98\xb5O\x150|?*'\
  b'\xd97\x19\xdf\xb8\nd\xcf\xf9\x17Q\x81\xec)\xef\xa3'\
  b'\xees\x1d\xae?\xc3\xc4\xe6['\
  b'')
# /26_note_Alderman_Wright.json size=1587, compressed level=9 wbits=10 compressed size=344
_f1 = const(
  b'(\xcf\x9d\x92\xb1j\xc30\x10\x86\xf7@\xde\xe1\xd0l'\
  b'ZK\xb6O\xceX2u\x08t(t\x08\x19\\Y'\
  b"\xd4\x02\xdb2\x8e\xd3\xb4o_\xa9\xc9u\x08\xa5'*"\
  b'\xb00\xbf>N\xe8\xee\xdb\xafW{\xd1\xda\xa3\x99\xdd'\
  b'\xb48?\x8aL(\x84\xd1/\x16\x1e\xfa\xd6\xceC3'\
  b'\xde\xefl\xff\xeeFx\x99\xdd[\xb7\xc0\xd14\xbd\xbd'\
  b'\x83\xe7\xb3\x87G\xb5\x85\xd7\xd3\x11lc:8\xbb\xa5'\
  b'\x03?Z\xd8m\x9fT\x91K-\x0eY,>Z?'\
  b'\xb9\x0f\xdb\x8b\x0c\xca\xfa\x12\r\xce\xcc~\xea\x02\x1c\xc3'\
  b'K\xb6\x84\x1a~\xb0\x8b\x9dCV]3\x7f2\xdd\xd4'\
  b'\xb4!\x11\xdf\xd5 \xacx\xe0\x94\t\x99\x94\xe1S\xd7'\
  b'|\x0fb0\xd3\xe5\xe2\x0c\n\x05\xc4\xc7\x15\xafl]'\
  b'\xc8\xf3X)\x03(\x8b\xf03\xd8\xde\xb7\x9f\xe2wR'\
  b'\x12Yq\xa4"\xb2\xe6\xc8\xe2JV9G\x96D*'\
  b'\x8e\xac\x88d_\x84D\x96\x1c\xa9\x89d\xdf^\x13\xa9'\
  b'9rC\xe4\x86\xed<\r\t\xd96I\x9a\x12J\x16'\
  b'\xa51!\xdbRIsB\xb6S\x92\x06\x85l\xab$'\
  b'M\n\xf1\x06\xfd\xf19\x10\x12\xff\xe53\xeaT\x9f\xb1'\
  b'N\xf5\x197\xa9>\xebd\x9f\xb5L\xf5Y\xabT\x9f'\
  b'u\x91\xea\xb3.S}\xd6\x98\xea\xb3\xd6\xc9>\xc7M'\
  b'p&\xff\t\xa9\x14\xa8H\x81\xca\x14\xa8\xba\x81`\xbd'\
  b':\xacW_\x1e3Y\x05'\
  b'')
# /31_note_Raffin.json size=1588, compressed level=9 wbits=10 compressed size=336
_f0 = const(
  b'(\xcf\x8d\x92\xb1j\xc30\x10\x86\xf7@\xde\xe1\xd0l'\
  b'\x8a%\xd9:e\xce\x94\xa1\xb4t\r\x19\\Y\xc1\x02'\
  b'[2\xb6C\xdb\xb7\xaf\x9cXK\t\xd5\t\x0c\xe6\xd7'\
  b'\xc7\xe9\xa4\xfb\xce\xfb\xdd\x99\xb5v6\x93\x1b\x17\x17<'\
  b'+\x98\xe4\xe0\xc3b\xe1\xa3\xb9^\x9d\x87\xd94\xbd}'\
  b'\x817o\xe1$\x8e\xf0y\x9b\xe1\xcb-\x1d\x08x='\
  b'\xbe\x0bYr\x04\x13\xfc2\x85\xbe\xb7\xd3\xcc.\xc5Z'\
  b'\xd1\xdb0\xbao\xdb\xb3\x02*\xfd\x88\x06g\xa60v'\
  b'\xc1\xdb5|dKc\xba0\xd8\xc5N1\xab\xb7,'\
  b'\xdcL76mL\xd8\xbd\x1a\xc4\xb5n8ab\xc6'\
  b'1~z\xcb\xcf\xc0\x063\xde\x9b\x88[R@\xe2\xd7'\
  b'\xb5\x1e\xd9\xba\x98\x97k\xa5\x02\xa0R\xf1g\xb0}h'\
  b"\x7f\xd8s\x92'R\xe7H\xb1\x915\xcf\x912\x912"\
  b"GV\x89\xcc\xf6Y'2\xdb\xa7\xdaHU\xe6HL"\
  b'd\xf6F:\x91"G\x1e\x12\x99\xbd;OCRU'\
  b'\x16MSRu\x16McR\x98E\xd3\x9cT\xf6M'\
  b'y\x1a\x94:d\xd14)|\xf2\xfe\x7f\xec\x95\xff\xdb'\
  b'\x8b\x82j/J\xaa\xbdXQ\xed\xc5\x9aj/\x92\xed'\
  b'E\xa4\xda\x8b\x9aj/\x1e\xa8\xf6\xea\x92j\xaf\xe6d'\
  b'{\xb5 \xdb\xab+\xb2\xbd\xba&\xdb\xab\x15\xd9^\x8d'\
  b'T{\xef8\x8b\x10\xecw\x97\xfd\xee\x17\x0f\xa0^\xfb'\
  b'')
# /35_note_custom.json size=1616, compressed level=9 wbits=10 compressed size=357
_f2 = const(
  b'(\xcf\x95\x92\xc1\x8e\x83 \x10\x86\xef\xfb\x14\xc4s\x0f'\
  b'\x822\xe0\xb3\x98\x1e,\x92\x96\xa4\n\x11\x9bt\xdf~'\
  b'a\x19\x1b\xb7M\xa7\xd9&\xa6f\xf8\x9c\x19?\xff\xbe'\
  b'\xafF\x1b\xcd\xe2\xc2\xea\xfc\\\x1dX\xd5H6\xfb\xd5'\
  b'2s\x8b\xab\x9fX4\xc3\xd5V\xc7\x03\xfb\xea\xab\xd9'\
  b'\xfa\xe0\xee\xf6\x9a\xb0V\x97\xd2\xe4\xcc\xe2\xc3\xc5\xcf6'\
  b'\x15y]\x8a\xeb`.~\xb2\xab]rC|x\xf5'\
  b'7s\t\xc3\x98J]\xa9,\xf6\xec\xe2\x06\x15\xf0m'\
  b'\xf5\x1c\x9c\xcfw,\xfd\xf2\xd4\xd1\xe5yMa\x94H'\
  b'\xff\x93\xbd\xfa\xf1\xfb\x95i\x91\xe1{\x86=Aj\x1b'\
  b'\xb6\xed\xfb\xf7X\x97#\x99{\x9c\x86\x18\x0b\xd2WN'\
  b'\x98|\x9c\xca\\\xec\x9e2A45W\xe9\xa8y\x94'\
  b'w\xed\xea\xd2M\xcb\xd7\x8d\xf6C\x91jHJ\xe0\xdb'\
  b'\xd1\xd4\xe6\xa9&)4\xa59II\xec\xa5H\n\x90'\
  b'\xeaH\n\xb5+\xda\x04\xda\xd7\xf4\xc4\x0e)\xa0\xad\xa2'\
  b'|\xd5\xd2\x18\xdaW\x1f\xba\xa1~\xfd\xa1\x1b\xfa\xd7\xb4'\
  b'\xffGT5\x8d\xe1\x17\xd0\xe2\t{\xe41\x01\x1c\xfe'\
  b'\x9dG\xc8[\x0e\xc6\xf8)\x10y\x84\x96\xa4P\x88\xcc'\
  b'\xafp\x1ab$\xd2(\x81`PE\xb9\xde\xa7P\xd2'\
  b';c\n[j\x12f\xb0\xa56\xc6\x04\x82 \xa7a'\
  b'\x02\x81\xd3\x1e7\xdd\x9a\xc66\xdf5\x8d\xa1p\x904'\
  b'\x86\xce\xa1\xa31\xd4\x0e\x8a\xc6\xd0>\xc0\x0e\xfb\x85\x8e'\
  b'?\xab\x1cq2'\
  b'')
# /48_note_custom.json size=3219, compressed level=9 wbits=10 compressed size=638
_f8 = const(
  b'(\xcf\x95\x92M\x8f\x9b0\x10\x86\xef\xfd\x15\x88s\x0e'\
  b'|\x18{|\xed\xaa\xc7\xaa{\x8f\xf6@\x8c\xbbA\x82'\
  b'\x18\x01\xa9\xba\xff\xbevx\xb3!q\x8c\xbb\x91\xa2\x88'\
  b'\xc9\xe3\x87\xf1\xbc\xb3\xdf\xa7\x8d\x9e\xd4\xd8\x0eskN'\
  b"\xe9.I\x19%'3\xebD\x9d\xa7\xd9\xf4\xc9\xa4\xea"\
  b'N\xa7o\xbbo\xc9>=i3\xb4\x7fug1F'\
  b'K\xa9o\xd5h\x86\xa39i[\xcc\xb3\xa58\xd7\xea'\
  b'hz=\xeb\xd1\x15wI\x81\xb29\xab\xe3P7\xb6'\
  b'(Q\xd1\xfd`\x9c-\xdb%%\xd9_\xb1\xd4G\xfd'\
  b'\xdeN\xcbqf\xcf\xa7\xdf\xcdyl.\xed\xfd\xae\xbb'\
  b'I{P\xe1\xa0_j\xae\xff\xe8 SJ\xcb\xbc\xb6'\
  b'J\x99\xce\x04!VX\xe8Ew\xda>\xdfC\xefC'\
  b'k.cp\x1fw\xef\xa6u\x97+-o\x7f\x85;'\
  b'\xd7\xeb\xce4\x1fn\x86O@\x060\x8f\x81b\x01o'\
  b'_\x1f\xa1\xe5\xaf\xca\xb9\x0e\xf54}b\xfb\xb4-\x94'\
  b'#\xec?9\xa6\xde\xab\xa1(\xb3\\\xb8\x11\x14\x9e+'\
  b'[TT\xc5\xda\x02WF\xb8\x02\xd7\x8cq\xd7\xb9e'\
  b'\x11\x0ec\xa3\xd8\xd8*\xf8D\x84\xe3\xe0d\x84C\n'\
  b'"6\x17DA\xb7\xf7\xee\x92Q\x0f]\xadt\x93\x1c'\
  b'>\x92aY\xb8\xe4\xc7\x81;\xc1\xcf\x0bry\xf2T'\
  b'\x12*\x1e\x8b\x02\x99\t\x16\x03\x11\x9a\x88\x1a\x91\x1aE'\
  b'\x8d\x88\x8d\xb2\xff]w\x8a\x81\x08\x8e\n\x1f\xfc\xdcf'\
  b'\xcb\xe4\xfc\x0b\xdb\xcc]\x9b\xb5\x1d|?ln3g'\
  b'\x11\x0es\xa9\xdc-\x0e\xf54m\xeer\xc57)L'\
  b'\xe4\xf6\r\xedpUnz\xb0\xc1l\xfbm\xd8_\xb6'\
  b'\xdd9\xb6\x97\x17\x919`5y\x1e\x9b\xeb5\x00\x8a'\
  b'\x81\xd7\x04\xb2\x18\x88\x08x\x15\x03\x91\x02\x971\x10A'\
  b'p\x11\x03\x91\x07\xe7>x]M\xeb\xaa\xbe\xb0\x98\xd2'\
  b'\xa9\x86\xd6\xba:c\xaf\xf6\xfc\xbd`\x89y\xec\xeb\xf2'\
  b'\x14\xdcg\x92\xab#\xdc\x16\x9e^ka\x85\xf0\xd8\xa0'\
  b'\x1e\x19HZwT>\xef\x1e,q\x8f\r\xea\x91\x1c'\
  b'\xad;\x12\x81\xee\xc1\x8a\xcac\x83z\xe4M\xeb\xee)'\
  b'\xa0\x07+\xb8\xc7\x06\xf5\xd8\x12\x99\xad\x8e\xc8\x80\x1e\xac'\
  b' \x8f\r\xea9\xf4w\xdb\x90?\x9f=X*<6'\
  b'\xa8\x17\xd0\xdf\x1d\xc9\x9e\xeb\xc1R\xe6\xb1A=A\xbf'\
  b'\x8e\xab\x0c\x0c\x07,\x95\x1e\x1b\xd4\xcb\xe5\xc8\xed\xebo'\
  b'{\x86\x0e\xe4\xba\xe9m\xf6n\x11\xb7\xc7\x97\xe7\xd0\xaf'\
  b'\x9bf\x01=X\xca\x1f\xd9\xb0\xbe\x80~\xddQ\x11\xd0'\
  b'\x83\xa5\xea\x91\r\xebK\xe8\xd7\x1dU\x01=X!\x1f'\
  b'\xd9\xb0\x9e\xc5\xe3\xa9<\xe4\xed\x1f\xae\x12\xea\x8e'\
  b'')
# /64_note_midi_over_serial.json size=2187, compressed level=9 wbits=10 compressed size=427
_f3 = const(
  b'(\xcfu\xd2\xb1n\xc20\x14\x85\xe1\x9d\xa7\xb0\x983'\
  b'\xe4\xc6\xbe\xd7\xf6\xde\x85\xa1O\x80\x18\x10X"\x12$'\
  b'Q\xa0U\x1f\xbf\x81r\xacJ\x1c\x98"\xff\x07\x0f\x9f'\
  b'\xbc]m\xd7\xc7r=\xcc\xfdt\xeb\xc7a\xdd\xb8\xb5'\
  b'\x057\x8c\xb7ru\x9f\x9b\x8f\x8d\x1b\xbf\xcb\xec\xaee'\
  b'\xee\xf7\xe7\xf5\xaeY\xd6C\x19\xa7\xfe\xa7\x9c\x97iH'\
  b'\x8f\x93K\x7f\x98\xc7\xe94\x0e\xe5\xfe\xf7\xbf\xd5m\x7f'\
  b'8\x8d\x97r+\xf3\xbf\xb3\xf1\xebp\x9a\xf6\xc7\xe5D'\
  b'\x97\x03\xb7\xfc\x96\xd3\xe7\xdd\x8ds\xd28i\x1b\xd7\xba'\
  b'g\xbc\xdf|\xec\x97\xd2\xde\xafX\x06!\xdd?^\xb2'\
  b' g\x9a\xbbg\xd6\x96f\x8f,4\x07\xe4\x8efE'\
  b'\xf64\x1br\xa09"+\xcd\t\xd9h\xce\xc8\x91\xb3'\
  b'\x80M\xdf\xb0\xc1M\xb9\x9b\x00\xce8\x9c@\xce\xb8\x9c'\
  b'\x80\xce8\x9d\xc0\xce\xb8\x9d\x00\xcf8\x9e@\xcf\xb8\x9e'\
  b'\x80\xcf8\x9f\xc0\xcf\xb8_\x07?\xe3~\x1d\xfc\xec\xcd'\
  b'\xbb\x83_\xe4~\x1d\xfc"\xf7\xeb\xe0\x17\xb9_\x07\xbf'\
  b'\xf8\xb8\xe8%\x83/\x06\x9a\xa1\x17\x95f\xe0E\xa3\x19'\
  b'v1\xb2\xecA\x17\x13\xcd\x90\x8b\x99f\xc0\xa5\x96f'\
  b'\xb8%\xa1\x19l\xa9\xa3\x19j\x89\xaay\xa8%\xaa\xe6'\
  b'\xa1\x96\xa8\x9a\x87Z\xa2j\x1ej\x89\xaa\x05\xa8%\xfe'\
  b'\xe0\x02\xd8\x12\x7fp\x01n\x99?\xb8\x00\xb8\xcc\x1f\\'\
  b'\x80\\\xe6\x0f.\x80.{\xdea\x97\x03\xef\xc0\xcb\xca'\
  b';\xf4\xb2\xf1\x0e\xbe\x1ciW\xf8e\xee\xa7\xf0\xcb\xdc'\
  b"O\xe1'-\x07T_\x07\\PC\x1dpB\xd5:"\
  b'\xe0\x86ju\xc0\x115\xd6\x01W\xd4T\x07\x9cQs'\
  b'\x1dpGk\xeb\x80C\x9a\xd4\x01\x97\xb4*)\\\xd2'\
  b'\xaa\xa4<%W\xbb_\xb1(\xb1\xf3'\
  b'')
# /drumdef.json size=932, compressed level=9 wbits=10 compressed size=334
_f9 = const(
  b'(\xcf\x8d\x91Mk\x83@\x10\x86\xef\xf9\x15\x83\xa7\x16'\
  b'\xb6\xe0\xd7\xac\xa6\xb0\x974\x81\x06\xda[o%\x84\xd5'\
  b',\x89\xe0*\xec\xae\rm\xc8\x7f\xaf\xbb\t\xd5\x165'\
  b'\xf5\xa4\xbe\xcf\xbc\xcc\xc3\x9cf\xd0>^^K)*'\
  b'\x13x\x8f\xe0E\x08\x19\xd7\x1av\xaa\x91pwlT'\
  b'Y\x98/\xa1\xee=\xf2\x8b\r-\x1b#\x94\xf5\x11L'\
  b'-\xff\xa4\x91K\x13\x9b>\xc8b7@\xc4\x8eH\xe1'\
  b'P\xec\x0f#\x08:d\x0e\xb9\xe2\xfa\x00\xf9\xa7\xccx'\
  b'9\xb1\x11\xb58\xfa\xa0+\xae\xc4\xad\xf5\x13\x0b\xa7\x08'\
  b'9\xd7\x86W\xc2\xe8\t6u\xc5\xed\x1e%\xff\x10\xfa'\
  b'\x1a^\x88\xd8\xf6\x9c\xdc\xbb\xfb\xae\xb8\x14\x96~\xb9z'\
  b'\xbf\xd5\x12^\xd7\xcb5\x8b\x13\xb6\x08\xd9\x82\x100M'\
  b'%\xac-\xac2\x8f@7\xbak\x147E]\xb5\xe3'\
  b'\x01\x92\xee\x7f[Sl\xcbB\x9b6x\xa7\x01\xa1>'\
  b'\xc1\x88 %4\xdc\xf4\xe7\xb5Qu\xb5\xdf\xf6jB'\
  b'\x7f \xb7u\xdaVa\xba\xf9\t\xe1|5F\x7f\xd8'\
  b"\xe7\xb9\xbdR'\x83>[Fl\xd9sYL\xb9\xc0"\
  b'\x98LD.>4$4\xbe-3\xeeB\xb1\xe7\xd2'\
  b'\xd3IpX\xe7\xc9]\xf2"\x93 [e\xc8\xb6\xe2'\
  b'_\xa7I\xc7m\xe6\x84&\x84"\xa1\xedi\xd2\x1b6'\
  b'\xc1\x94M\xe2w6\xe7\xd9\xf9\x1b.\xcb\xf0\x8a'\
  b'')
# /pinout.txt size=27
_f7 = const(
  b'data/20_note_Car'\
  b'l_Frei.json'\
  b'')
# /tunelib.json size=3
_f6 = const(
  b'{}\n'\
  b'')
direntries = const(( ( '/20_note_Carl_Frei.json',  ( _f5, True, 891 ) ),
 ( '/20_note_gpioservo.json',  ( _f4, True, 941 ) ),
 ( '/26_note_Alderman_Wright.json',  ( _f1, True, 1587 ) ),
 ( '/31_note_Raffin.json',  ( _f0, True, 1588 ) ),
 ( '/35_note_custom.json',  ( _f2, True, 1616 ) ),
 ( '/48_note_custom.json',  ( _f8, True, 3219 ) ),
 ( '/64_note_midi_over_serial.json',  ( _f3, True, 2187 ) ),
 ( '/drumdef.json',  ( _f9, True, 932 ) ),
 ( '/pinout.txt',  ( _f7, False, 27 ) ),
 ( '/tunelib.json',  ( _f6, False, 3 ) ),
))

version = const(2)
date_frozen = const( '2025/06/15 01:15:34' )

sum_size = const(12991)
files_folders = const(10)
import os
import errno
import sys
class _VerbosePrint:
 def __init__( self, module_name, function, silent ):
  self.silent = silent
  self.prefix = f"{module_name}.{function}"
 def print( self, *args ):
  if not self.silent:
   print( self.prefix, *args )
def _file_exists( filename ):
 try:
  open( filename ).close()
  return True
 except:
  return False
def _extract_file( dir_entry, destination ):
 from io import BytesIO
 data = dir_entry[0]
 if not data:
  return
 buffer = bytearray(256)
 stream = BytesIO( data )
 if dir_entry[1]:
  from deflate import DeflateIO, AUTO
  stream = DeflateIO( stream, AUTO, 0, True )
 with open( destination, "wb" ) as outfile:
  while True:
   n = stream.readinto( buffer )
   if n == 0:
    break
   outfile.write( memoryview( buffer )[0:n] )
 stream.close()
def _create_folder( folder, vp ):   
 path = ""
 for p in folder.split("/"):
  path += "/" + p
  path = path.replace("//", "/" )
  try:
   os.mkdir( path )
   vp.print( f"folder {path} created." )
  except Exception as e:
   if type(e) is not OSError or e.errno != errno.EEXIST:
    vp.print( f"folder {path} not created: ", e )
def _extract_all( direntries, target, overwrite, vp ):
 _create_folder( target, vp )
 for filename, dir_entry in direntries:
  dest = (target + filename).replace("//", "/")
  if dir_entry:
   try:
    if overwrite == "never" and _file_exists( dest ):
     vp.print( f"file {dest} exists, not extracted." )
    else:
     vp.print(  f"extracting file {dest}." )
     _extract_file( dir_entry, dest )
   except Exception as e:
    vp.print( f"file {dest} not copied: {e}." )
    raise
  else:
   _create_folder( dest, vp )
def extract_fs( module_name, target, overwrite, silent ):
 module = __import__( module_name )
 if module_name != "__main__":
  del sys.modules[ module_name ]
 vp = _VerbosePrint( module_name, "extract", silent )
 vp.print( f"extracting files to {target}." )
 _extract_all( direntries, target, overwrite, vp )
 return 
extract_fs( __name__, '/data', 'always', False )