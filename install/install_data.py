# /20_note_Carl_Frei.json size=910, compressed level=9 wbits=10 compressed size=264
_f3 = const(
  b'(\xcf}\xd2Kk\x840\x10\x00\xe0\xfb\xc2\xfe\x87\xc1'\
  b'\xf3">\xa2\xc6s\xa1\xa5\xa7\xf6\xbe\xec!\x8d\xa1\x06'\
  b'b&\xa8\x85\xee\xbfo\x82#\xec\x82\x1d/\x81\xf1\x9b'\
  b'\x87\x13\xaf\xe7\xd35\x1b\xcc\xa2g\x1bV\x8b>\xbb@'\
  b'V\x15\xe0q5\xf0\xa2f\x07\xaf\xb3\xb1\xb0h\xe5L'\
  b'\x0eo\x9f\xef\x1f\x10\xac_\x00\xbd\xbb\xe7\xd9\xed\x92\xb2'\
  b'\xbd\xc1`\x7f\x8d\x8b\xa9Bn\xa1\xc9\xea\x19\xc3\x88\xde'\
  b'\xa4z\xe4V\xa5G\x9c\xccj\xe6\xc7 \xfe\xe81\xa8'\
  b'!\x86\x9a\x14\x81\xf8\xa4\xf8w\xb0\x98Ov\xb0\xf1\x05'\
  b'\xb4\xc9GP\xc7\xf3K-\x0b\xe5>\x99\x8e\x8c\xfc\xdf'\
  b'\x94\xcdf\xda\x821\xd4\xab\xad\xe2\xa9\xb4\xc6)\x1c)'\
  b'\xea\xd6\xd6\xac\x92\xa4\x04\xa7`W\r\xabzR\x1d\xdb'\
  b'\xb1 \xd5\xb3\xaa\xdcT\x97\xf4d\x1c\x0e\xf7#U\x91'\
  b'\xaaXU\x93\x12\xac\x12\xa4\x9agux\xdb\xfbt-'\
  b'WQ\xec\xd3u\xac\xdak\xf5\xac\xa2\xad\xc9\x92S5'\
  b'\xdd\x80d\xf7!\xe8\xcf\x90\xec>*\x9aK>~\xe3'\
  b'\xf9t\xfb\x03A\xf9\xec\xad'\
  b'')
# /26_note_Alderman_Wright.json size=1713, compressed level=9 wbits=10 compressed size=367
_f1 = const(
  b'(\xcf\x8d\xd2Ak\x830\x14\x07\xf0{\xa1\xdf\xe1\x91'\
  b'\xb3t&\xd1D\x8f\xa3\xa7\x1d\n;\x0cv\x90\x1e\\'\
  b'\x0c3\xa0F\xd4\xae\xdb\xb7_2}=\x14:\x9e\xd0'\
  b'"/?_\xe9\xffo\xb5\xdfU\xac\xb1\xb3\x99\xdc\xb8'\
  b'8?\xb0\x84\t\x05\x83_,<w\x8d\x9d\xfazx'\
  b':\xd9\xee\xcb\r\xf0>\xb9\xcfv\x81\xd9\xd4\x9d=\xc0'\
  b'\xdb\xd5\xc3\x8b8\xc2\xc7e\x06[\x9b\x16\xaeni\xc1'\
  b'\x0f\x16N\xc7W!S\xae\xd99\x89\xcb\x07\xebG\xf7'\
  b'm;\x96@V\xac\xa3\xde\x99\xc9\x8fm\xc0q\xb8\xce'\
  b'\x96\xb0\xc3\xf7v\xb1S\x98\xe5\xdb\xcc_L;\xd6M'\
  b'\x98\xb0\xbfm\x10\xaex\xe0\x84\t3^\x84O\xb9\xcd'\
  b'+`\xbd\x19\xd7\x1fN@\n@\x1f\xaf*\x9e\x1dz'\
  b'\xd7\xb8p\x96\xc6m\t@&\xc3Mo;\xdf\xfc\xb0'\
  b'\xc7\x9a\xa3\xce)Z\xa0.(Zn:O):C'\
  b'-(:GM\xfa\x97\nuF\xd1\x1a5)\x93\x02'\
  b'\xb5\xa6\xe8\x12uIj\x07\xcbT\xa4\x089\xb6\xa98'\
  b'\x89c\x9d\x8a\x149\xc7>\x15)E\x8e\x85*R\x8c'\
  b'\x1c\x1bU\xea\x8eW\xcc\t\xb3\x06]n\x8fW\x10\x1f'\
  b'\x152\xe5:\xbeg\xe2\xf1\xda[\x80\xa4vn\xf9\x91'\
  b'\xde\xef[|\xa4.1=M\xaa\x12\xc3\xd3\xa4&1'\
  b';M*R\xa1\x96\x14\xadQ\x93Z/P+\x8a.'\
  b'Q\xd3\xda\xc12\xe3\x17\xfb\x0fr*\x14T(\xa90'\
  b'\xa3\xc2\xfc\x0e\xc2~w\xde\xef~\x01R\x03\x86w'\
  b'')
# /31_note_Raffin.json size=1716, compressed level=9 wbits=10 compressed size=360
_f0 = const(
  b'(\xcf\x8d\x92\xc1j\x840\x10\x86\xef\x0b\xfb\x0eC\xce'\
  b'\xb2\x98D\x93x\xdeS\x0f\xa5\xa5W\xd9\x83\x8dY\x0c'\
  b'h"\xea\xd2\xf6\xed\x9b\xec:=ua\x04A\xfe\xf9'\
  b'\x1c\xe2\xff\xd9\x1e\x0f-\xeb\xddj\x17?o>\x06V'\
  b'0\xc9!\xc4\xcd\xc1Gw\xbd\xfa\x00\xab\xedFw\x82'\
  b'\xb7\xe0\xe0E\x9c\xe1\xf3\xb6\xc2\x97\xdf\x06\x10\xf0z~'\
  b'\x17\xb2\xe4\x1al\x0c\xdb\x12\xc7\xd1-+\xbb\x14yc'\
  b'pq\xf6\xdfnd\x05T\xe6\x11M\xde.q\x1eb'\
  b'p9|d[g\x878\xb9\xcd-)\xab\xf7,\xde'\
  b'\xec0w}J\xd8}\x1b\xa4+\x0f\xbc\xb0)\xe3&'\
  b'\xdd\xcd\x9e\xb7\xc0&;\xdf\x0f\x91FR\x00\xf2\xf9j'\
  b'\xf3\xec4\xf9\xde\xa7Y\x99\xb7\x15\x00\x95J\x0f\x93\x1b'\
  b'c\xff\xc3\x9e\xd3\x1ciC\xa1\xc5N\xd7\x9cBK\xa4'\
  b'%\x85\xae\x90&\x9d\xbbF\x9atn\xb5\xd3\xaa\xa4\xd0'\
  b'\x1ai\xd2W\x1a\xa4\x05\x85n\x90&u\xc2Q\xa6\xaa'\
  b'H8\xdaT5\tG\x9dJ\x93p\xf4\xa9H\x9ds'\
  b'\x14\xaa\x1a\x12\x8eF\xf5?\x8eZ\xc8\xa8\x90%\xd7\xf9'\
  b'\xbf\x92\xcf\xd7`a\x9ad\x03\xfb\xd2$\x1bX\x97&'\
  b'\xc9\xc0\xb64\xc9\x05\x96\xa5\x15\x85\xfe\xeb\x8a$N!'\
  b'M\xf2\xa6\x91&i3;mJ\n\xdd \xcdIv'\
  b'P\xa6\xa1\xc9D\x9b\x86\xe4\x87\xa3NC\x12\xc4\xd1\xa7'\
  b'!\x19\xe2(\xd4\x90\x14\xf1\xdd\xe8\xfd\x15\x96@8\x1e'\
  b'.\xc7\xc3/\xd9\xab\x8c\xbd'\
  b'')
# /35_note_custom.json size=1661, compressed level=9 wbits=10 compressed size=395
_f2 = const(
  b'(\xcf\x95\x92\xdd\x8a\xc3 \x10F\xef\xfb\x14\x92\xeb\xb2'\
  b'D\x13\x7f\xf2,\xa5\x17\xa9q[!\x896\xdae\xf7'\
  b'\xedWqR\xba\r\x19\xd8\x8b\x10\x989\x8e\xe3\xe1;'\
  b'\x9d\xaa\xc1\x04\xbdX\x1f\xad\x9b\xab#\xa9\x1aNf\x17'\
  b'\r\xd1\x8f\x10\xddD\x82\xeeGS\x9d\x8f\xe4p\xaaf'\
  b'\xe3\xbc\xfd6c\xc2ZUJ\x93\xd5\x8b\xf377\x9b'\
  b'T\xa4u)\xc6^\xdf\xdcd\xa2Y\xf2@8\x1c\xdd'\
  b'C\xdf|?\xa4RW*\x8b\xb9\xdaP F\x13\xe8'\
  b'\xad\xd6nt\x89\xff\xdblej\xde\x1fv\x8e\xdb\x96'\
  b'J-\xa7c\xffe6\xbd\xa6K\xbd\xcf\xc5\x18\xba='\
  b'VC\x8b\x95\xd6\xd5[\xf71\xd9\xc1\xe6G4y\xe7'\
  b"#\x91,\xfd'3\xba\xe1'C\xe4\x8dj\x81\xa2\xaf"\
  b'\x14\xd9`\xb2`\xd5S\xc4;\xa0J\x93\xe79\x97>'\
  b'\x84\x15\xb2L\xe7v*S\x96J\xc9\xb4\xf6\xac\xa9\xa9'\
  b'\xcc/c\x00\xa5\xda:\xa8.s\x14\xdf\xec\xf3\x02Q'\
  b'\x80\x1a\x0cb\xf02\x14Z%\xd5\x18\x04\x8e\x14\xc5 '\
  b'\x0e\x93$\x06\t\x80:\x0c\x02\xd7\x12U\x00\xbe\x15z'\
  b']\x07\x90@e\x82r\xd9\xa2\x148\x97\xf8,\x90\xae'\
  b'\xf0Y`]\xa1\xd6\x9f\xd1T(\x05\xde\x15\xdbP\x10'\
  b'\xbd\x04P\xf1\x8f\xe8\x89\xbc]\xaf\xb5\x9b\xfc~\xf4D'\
  b'\x8bA`\x81\xe7\xcd/}\x08\xfb\xc1\xe3b\x1f\x81\xf7'\
  b'\x97o7p\x1c]\x17\x02\xd7"\xd7@\xdcZdY'\
  b'\x08\x9b`\xd8U\x106AQ}\xabd\x85R\xab\xe5'\
  b'\x1a\xa5@\xb3\xe0(\x05\xa6E\x87R [H\x94\x02'\
  b'\xe7B\xbcP\x87\xf3/\xfe\xb1\xa9o'\
  b'')
# /48_note_custom.json size=4033, compressed level=9 wbits=10 compressed size=695
_f6 = const(
  b'(\xcf\x95\x92\xcdn\xdb0\x10\x84\xefy\n\xc3\xe7\xa0'\
  b' )\xf1\xef\x9a>@s\x0frPh"\x11`\x99'\
  b'\x82e\x17\xed\xdbW\xaa\x866%\x93\x14c@0\xb4'\
  b'\xfavf\xc9\x9d\xb7\xa7\xdd\xf8{\xdb\x1f\xec`\xcem'\
  b'\x7fi\xddi\xff\xbc\xdb\xd7jwr\x17\xbb3\xd7\xe1'\
  b'\xe2\xba\xdd`\x9a\xa3\xdd\xbf?\x03>Y\xd7\xb7\x7f\xec'\
  b'q$ku\xabv\xad9\xbb\xfe\xcb\x9d\xecX\xa7\xe4'\
  b'V\xbf4\xe6\xcbu\xf6b\xcfc\xbd\xba\x97\xdd\xd5|'\
  b'\xf5\xcda,\xea{\xd1v\xbd\x9b\x06\x98\x9f\xfd\xe4\x89'\
  b'Og\xfb\xd9\x0e\xb3\xc8\xff\xaf/\xeez>\xcc\xd3\xde'\
  b"'[C\xbf\xcc\xa5\xf9m\xf3\xcckk\x8c;\xba<"\
  b'\xf4\xd3\x1e\xed\xf8\xee!P\x9f}\xeb~t\xed\xa1\x9d'\
  b'N\\\xcd\xa8d\xe3\x7fg\x8f\xee\xf0w)\x19\x83U'\
  b'\xbd\x801n\xbc\xa5\x86>-\xd1\x07\xac\xaar}y'\
  b'\xbbv<qL\xcd\x9f\xf94\xc6G3\x0c!\n\xbe'\
  b'ef"G\x82\xb2{<L\xcf*B\xe5\x14\x82E'\
  b'\xd5+\x13\x8c\xcc\x17#\xfb5\xc7:h\xf4\x90\xb9\x0e'\
  b'\x86;\xac\x12w\xf8\x88\xae\xc6Y\xdf`\xd0\xe0\xf7O'\
  b"\xb6\xb5\xfd\xf6Y\xa9\xb6_'->)\xc74\xb2\xb8"\
  b'C\xa0C\x17w 1\x92\x7f\xb7C\xc9\xd2\x83\xabh'\
  b'C\x14\xd5@Ey~\x109Yo\xab{v%\x9f'\
  b'\x19\x9d"\x9e\xf2\x1b\x03\xf9\xd0\xd5\xe5->K\xa4\xbc'\
  b'\x05i\x92\xaa\xbc\x85G\x13\x1b\xb4\xa0\xa7e\x068\x15'\
  b'\xa1\x10\xab\x08\x95\xe3\x97\x8a\xc5\xe4q\xb7b:Kc'\
  b'\x8c\xeb\xfa\xe4\x1eH4s\xb95@\xbb\xde\xd6\x8e/'\
  b',\xa3\x8du\xf1\xe9"?\x9aaH*cI\\l'\
  b'\x81X\xcd\xfd\x89AX\x06\xaf\xb6\xd4\xc4\x0c\xd6\x9b\xb6'\
  b'\x12\xe0\xe6A\x14n\x93m\xdf\xa6\x06J\x0b.\xde\x07'\
  b'@\x15\xb0~\xa1\xa4\x80\xc5\x82\x04/g\xa5,N\x16'\
  b'\xb6*t\x81:XE\x8b\xd5\x11\x05!\x0b\xd4\xc1J'\
  b']\xac\x8e\x0c\tQ\xa0\x0eV\xaa\x84:ZZf\xe6'\
  b'\x04\xf3P\x85U\x84\xca\xb1^\xb1\x986\x16\xaf\xa71'\
  b'\xfav\x9c\xe3\xe8\xc6M$G\x01\xae\xea\x07\xfcu~'\
  b'\x8b\x1f\x00]:\xe8\x12\xe9\xe3\x069X\xd09\x0b\x84'\
  b'G\xabp\xb0*\xe9\x01\\\x89\x07<g\xe23\x14N'\
  b'&\x93\x1e\xa0%_\xd39\x0b\x04I\x85\xe7PI\x0b'\
  b'\x1f;\xb1\xa6s\x16H\x93&A\x93NZ\x84\xd9['\
  b'\xd09\x0b\x01\x8bELh\xd2\x03\xb8b\x0fx\xceD'\
  b'\xc2d\xd1E\x92&\xc0\x15y\xc0s&\n&\xe1\x12'\
  b'\xd3\xb1\x02\xad\xaa5\x9d\xb3\xd0s\xd3\xfd\x89A\x94`'\
  b'\x10\x1d\x8e\x9f\xc6)\xf0p\x92z\x13Wt\x8d\xe7\x06'\
  b'\xa7\x0c&2\xe8bi\x13\xe0\x8a\xaf\xf1\xacI\x05\x93'\
  b'p4\x9e6\x01.\xf5\x1a\xcf\x9a\xd4E;\xe0\x0f\xd4'\
  b'\xd3\xfb?7\xe5\xdc\xbb'\
  b'')
# /drumdef.json size=797, compressed level=9 wbits=10 compressed size=266
_f7 = const(
  b'(\xcf\xad\xd2\xcfk\x830\x14\x07\xf0{\xff\x8aG\xce'\
  b'o`\xd4\x97\xd8B\x0e\xb5\x16V\xd8n\xbbI\x11\x8b'\
  b'\xd2\x05\xaaBM\xbbC\xf1\x7f_\xf6C\x1a\xdd\xd6z'\
  b'XN\x81\xbc\xbc|?\xbc\\f`\x17\x0b\x89-\xe0'\
  b'\xc2\xea\xbc*\xed\x86=5o\xf0\xd2T\xf0\xbcI6'\
  b'*$\xb5\xf4\xd5\x12\x11\xcc\xa9.\x0b0\r\xc4;\x86'\
  b'\xf0y\xb3_\xac8\x1ds\xa3\x9b\xda^\x174>\xac'\
  b't\xa1\xb3\x83n\r[\xa4\x10FH\x1c)\xd8\x8e\xab'\
  b'Zsl\xea}\xf6Q\xdc\xda6i(\xb6\xf8k\xc5'\
  b'\xf5-\t\x1d~\x0b\xe4X\xf0`\x1b9\n\xa9b_'\
  b'\xc5\xaeb=P\xb8\x02\xee\n\xdc\xf46\x94M\x1f '\
  b'\t\x14\xdc\x05\xfc\x08o\x89"\xb8\x9b\x1fx\xd4\x03\xc8'\
  b'\x1b\x00\x1e\xf5\xfe\xf5\x9a\x9e<\x95\x04*\x99<\x82\xe8'\
  b'\xc6\x04 \x156\xbdD\x11\xa1\x98\xa3\xe4(\xfd\xbb\xa3'\
  b'\xa0\x08\xa57A\xc3{\x8d\x1c~\xa8\xd5!?\x97\xed'\
  b'\x97E\x92Z\xefHe\xe5\x9f\xa3\x18k\xe4?k\xa6'\
  b'P\xe6\xdd\xac{\x07\xcf\x12\xc4\xf6'\
  b'')
# /pinout.txt size=27
_f5 = const(
  b'data/20_note_Car'\
  b'l_Frei.json'\
  b'')
# /tunelib.json size=3
_f4 = const(
  b'{}\n'\
  b'')
direntries = const(( ( '/20_note_Carl_Frei.json',  ( _f3, True, 910 ) ),
 ( '/26_note_Alderman_Wright.json',  ( _f1, True, 1713 ) ),
 ( '/31_note_Raffin.json',  ( _f0, True, 1716 ) ),
 ( '/35_note_custom.json',  ( _f2, True, 1661 ) ),
 ( '/48_note_custom.json',  ( _f6, True, 4033 ) ),
 ( '/drumdef.json',  ( _f7, True, 797 ) ),
 ( '/pinout.txt',  ( _f5, False, 27 ) ),
 ( '/tunelib.json',  ( _f4, False, 3 ) ),
))

version = const(2)
date_frozen = const( '2024/10/09 16:05:44' )

sum_size = const(10860)
files_folders = const(8)
import os
import errno
import sys
class _VerbosePrint:
 def __init__( self, module_name, function, silent ):
  self.silent = silent
  self.prefix = f"{module_name}.{function}"
 def print( self, *args ):
  if not self.silent:
   print( self.prefix, *args )
def _file_exists( filename ):
 try:
  open( filename ).close()
  return True
 except:
  return False
def _extract_file( dir_entry, destination ):
 from io import BytesIO
 data = dir_entry[0]
 if not data:
  return
 buffer = bytearray(256)
 stream = BytesIO( data )
 if dir_entry[1]:
  from deflate import DeflateIO, AUTO
  stream = DeflateIO( stream, AUTO, 0, True )
 with open( destination, "wb" ) as outfile:
  while True:
   n = stream.readinto( buffer )
   if n == 0:
    break
   outfile.write( memoryview( buffer )[0:n] )
 stream.close()
def _create_folder( folder, vp ):   
 path = ""
 for p in folder.split("/"):
  path += "/" + p
  path = path.replace("//", "/" )
  try:
   os.mkdir( path )
   vp.print( f"folder {path} created." )
  except Exception as e:
   if type(e) is not OSError or e.errno != errno.EEXIST:
    vp.print( f"folder {path} not created: ", e )
def _extract_all( direntries, target, overwrite, vp ):
 _create_folder( target, vp )
 for filename, dir_entry in direntries:
  dest = (target + filename).replace("//", "/")
  if dir_entry:
   try:
    if overwrite == "never" and _file_exists( dest ):
     vp.print( f"file {dest} exists, not extracted." )
    else:
     vp.print(  f"extracting file {dest}." )
     _extract_file( dir_entry, dest )
   except Exception as e:
    vp.print( f"file {dest} not copied: {e}." )
    raise
  else:
   _create_folder( dest, vp )
def extract_fs( module_name, target, overwrite, silent ):
 module = __import__( module_name )
 if module_name != "__main__":
  del sys.modules[ module_name ]
 vp = _VerbosePrint( module_name, "extract", silent )
 vp.print( f"extracting files to {target}." )
 _extract_all( direntries, target, overwrite, vp )
 return 
extract_fs( __name__, '/data', 'always', False )