# /20_note_Carl_Frei.json size=891, compressed level=9 wbits=10 compressed size=262
_f4 = const(
  b'(\xcf}\xd2;k\xc30\x10\x00\xe0=\x90\xffpx'\
  b'\x0e\xc1\x0f\xd9\x96\xe7BK\xa6v\x0f\x19TY\xd4\x02'\
  b"[',\x17\x92\x7f_\xa9>C\x06\xe7\xbc\x08N\xdf"\
  b'=t\xf8z<\\\xb3\xde\x04=[\xbfXt\xd9\t'\
  b'\xb22\x07\x87\x8b\x8175\x8f\xf0>\x1b\x0bA\xab\xd1'\
  b'\x9c\xe1\xe3\xeb\xf2\t\xde\xba\x00\xe8\xc6\xc79\xbb\x9dR'\
  b'\xb63\xe8\xed\xdd\x8c1U\xc854Y=\xa3\x1f\xd0'\
  b'\x99T\x8f\xdc\xa2\xf4\x80\x93Y\xcc\xfc\x1c\xc4_=x'\
  b'\xd5\xc7P\x9d")\xf6\xe3-\xfe_C\xfcR\xb1\xde'\
  b'\xc6khRVdU<\xbfU\x08;\xa4%"_'\
  b'\x92\xa2^I\x93\xbf&\xd4\xa8)\xe3\xa9\xb4\xc6\xc9\xef'\
  b' j\xd5T\x1c\x92\x84\x04\x83`C5\x87:B-'\
  b"\xd7.'\xd4q\xa8XQ\x9b\xf0dF\xec\x1f;\xa8"\
  b'$Tr\xa8"$8$\x08\xd5\x0c\x82m\xa6\x86A'\
  b'b\x9b\xa9\xe5\xd0V\xa9\xe3\x10\xedI\x16\x0c\xaah\xe3'\
  b'\x92[\x81\xa0\xbf@r+(i&\xf9\xfc\xba\xe3\xe1'\
  b'\xf6\x07T\xed\xd3@'\
  b'')
# /26_note_Alderman_Wright.json size=1585, compressed level=9 wbits=10 compressed size=343
_f1 = const(
  b'(\xcf\x9d\x92\xb1j\xc30\x10\x86\xf7@\xde\xe1\xd0l'\
  b'\xdaH\xb6O\xf6X2u\x08t(t\x08\x19\\Y'\
  b'\xc4\x02\xdb2\x8e\xd3\xb4o_\xa9\xc9-\xa1\xf4D\x05'\
  b'\x16\xe6\xd7\xc7\t\xdd}\xfb\xf5j/Z{2\xb3\x9b'\
  b'\x16\xe7G\x91\t\x850\xfa\xc5\xc2S\xdf\xdayh\xc6'\
  b'\xc7\x9d\xed?\xdc\x08o\xb3;v\x0b\x9cL\xd3\xdb\x07'\
  b'x\xbdxxV[x?\x9f\xc06\xa6\x83\x8b[:'\
  b"\xf0\xa3\x85\xdd\xf6E\xe5\x1b\xa9\xc5!\x8b\xc5G\xeb'"\
  b'\xf7i{\x91AQ]\xa3\xc1\x99\xd9O]\x80cx'\
  b'\xcd\x96P\xc3\x0fv\xb1s\xc8\xca[\xe6\xcf\xa6\x9b\x9a'\
  b'6$\xe2\xa7\x1a\x84\x15\x0f\x9c2!\x93U\xf8\xea['\
  b'\xbe\x071\x98\xe9zq\x06\xb9\x02\xe2\xe3\x8aW\xb6.'\
  b'\xe4\x9bX)\x03(\xf2\xf03\xd8\xde\xb7_\xe2wR'\
  b'\x12Yr\xa4"\xb2\xe2\xc8\xfcF\x96\x1b\x8e,\x88T'\
  b'\x1cY\x12\xc9\xbe\x08\x89,8R\x13\xc9\xbe\xbd"R'\
  b'sdMd\xcdv\x9e\x86\x84l\x9b$M\t%\x8b'\
  b'\xd2\x98\x90m\xa9\xa49!\xdb)I\x83B\xb6U\x92'\
  b'&\x85x\x87\x92\xcf\xa1\x99\xff\xb3\x19u\xaa\xcdX\xa5'\
  b'\xda\x8cu\xaa\xcd:\xd9f-Sm\xd6*\xd5f\x9d'\
  b'\xa7\xda\xac\x8bT\x9b5\xa6\xda\xacu\xb2\xcdq\x13\x9c'\
  b'\xc7\x7fB*\x05\xcaS\xa0"\x05*\xef X\xaf\x0e'\
  b'\xeb\xd57\xd4\xbcX\xb7'\
  b'')
# /31_note_Raffin.json size=1588, compressed level=9 wbits=10 compressed size=336
_f0 = const(
  b'(\xcf\x8d\x92\xc1j\xc4 \x10\x86\xef\x0b\xfb\x0e\x83\xe7'\
  b'P\xa2&\x8e9\xef\xa9\x87\xd2\xd2\xeb\xb2\x87\xd4X"'\
  b'$\x1a\x92,m\xdf\xbef7^\xcaRG\x08\x84\xdf'\
  b'\x8fqt\xbe\xf3\xf1pf\x9d]\xcc\xec\xa6\xd5\x05\xcf'\
  b'\n&9\xf8\xb0Zxo??\x9d\x87\xc5\xb4\x83}'\
  b'\x82Wo\xe1Y\x9c\xe0\xe3\xba\xc0\x97[{\x10\xf0r'\
  b'z\x13\xb2\xe4\x08&\xf8u\x0e\xc3`\xe7\x85]\x8a\xad'\
  b'\xa2\xb7ar\xdfv`\x05T\xfa\x1e\x8d\xce\xcca\xea'\
  b'\x83\xb7[x\xcf\xd6\xd6\xf4a\xb4\xab\x9dcV\xefY'\
  b'\xb8\x9a~j\xbb\x98\xb0[5\x88k\xdbp\xc2\xc4\x8c'\
  b'\xeb\xf85{~\x066\x9a\xe9\xd6D\xdc\x92\x02\x12\xbf'\
  b'\xad\xed\xc8\xce\xc5\xbc\xdc*\x15\x00\x95\x8a?\xa3\x1dB'\
  b'\xf7\xc3\x1e\x93<\x91:G\x8a\x9d\xacy\x8e\x94\x89\x94'\
  b'9\xb2Jd\xb6\xcf:\x91\xd9>\xd5N\xaa2Gb'\
  b'"\xb37\xd2\x89\x149\xb2Id\xf6\xee<\rIU'\
  b'Y4MI\xd5Y4\x8dIa\x16MsR\xd97'\
  b'\xe5iP\xaa\xc9\xa2iR\xf8\xe0\xfd\xff\xd8+\xff\xb7'\
  b'\x17\x05\xd5^\x94T{\xb1\xa2\xda\x8b5\xd5^$\xdb'\
  b'\x8bH\xb5\x175\xd5^l\xa8\xf6\xea\x92j\xaf\xe6d'\
  b'{\xb5 \xdb\xab+\xb2\xbd\xba&\xdb\xab\x15\xd9^\x8d'\
  b'T{o8\x8b\x10\x1c\x0f\x97\xe3\xe1\x17\x1a\xa0^\xfd'\
  b'')
# /35_note_custom.json size=1710, compressed level=9 wbits=10 compressed size=397
_f2 = const(
  b'(\xcf\x95\x92Mn\xc3 \x10F\xf7=\x05\xf2:\x0b'\
  b'\x83\xcd\x8f\xcf\x12e\xe1`\x9a \xd9\x86\x1aR\xb5\xb7'\
  b'/\x84\x89\xe5\xc4\xeaT\x8d\x14E\x9a\xef1\x03/s'\
  b'<V\x83\tz\xb1>Z7W\x07R5\x9c\xcc.'\
  b'\x1a\xa2o!\xba\x89\x04\xdd\x8f\xa6:\x1d\xc8\xdb\xb1\x9a'\
  b'\x8d\xf3\xf6\xcb\x8c\tkU)MV/\xce_\xddl'\
  b'R\x91\xd6\xa5\x18{}u\x93\x89f\xc9\r\xe1pt'\
  b'7}\xf5\xfd\x90J]\xa9,\xe6bC\x81\x18M\xa0'\
  b'\xb7Z\xbb\xd1%\xfe9le\n?nv\x8e\xfbH'\
  b'\xa5\xc8\xe9\xd8\x7f\x9a]\xd6t){_\x8c\xa1\xfbc'\
  b'5D\xacD\x17o\xefcI\xfa\xe47\r6\xbf\xa6'\
  b'\xc9\x97?\x10\xc9\xd2\xefdF7|\xef\x99\x16\x18\xba'\
  b'e\xc8\x0b$\x0bT\xad6\x9ecU"\x9e{\x9c\xfb'\
  b'\x10\nr\xac,\xd39Ne\xca6\xa7\xb4gMM'\
  b'e~\xe1Z\xde\xb4\xabK7\xc5\xf77\xda\x0e\x05\xaa'\
  b'A)\x06\xaf\xc3\xa9\x87\xa7\x1a\xa5\xc0\x94\xa2(\xc5\xa1'\
  b"\x97D)\x01T\x87R\xa0]\xe2&\xc0\xbe\xc2'v"\
  b'@\t\xdc*\xc8\x97-\x8e\x81}\xf9G7\xd0\xaf\xfe'\
  b'\xe8\x06\xfe\x15\xee\x7f]U\x85c\xf0\x0f(\xf6\x82\xad'\
  b'\xfb\x98\x00*\xfe\xbd\x8f"\xdf\xb2\xd7\xdaM\x1e\xd9G'\
  b'\xd1\xa2\x14\x08\xe1\xf9\t\xe7>\x04d\x1b\xb9@\x18P'\
  b'Q\xbe\xbfo!\xc7\xef\x0c[\xd8b\x93`\x07[\xec'\
  b'\xc6\xb0\x81\x82\xa1\xd3`\x03\x05\xc5=>t+\x1c{'\
  b'\xf8\xaeq\x0c\x84\x0b\x8ec\xe0\\t8\x06\xda\x85\xc4'\
  b'1\xb0/\xc4\x06\xbbC\xa7\x1fe\xdb\x8eP'\
  b'')
# /48_note_custom.json size=4255, compressed level=9 wbits=10 compressed size=714
_f7 = const(
  b'(\xcf\x95\x92\xcdn\xe3 \x14\x85\xf7y\x8a(\xeb.'\
  b'\x0c\x98\xbf\xed\xf4\x01\xa6\xfb\xaa\x0b\x97\xa0\xd6R\x12\xac'\
  b'\xd8\x19\xcd\xbc\xfd\xe0\xfa\x90`\xc7\x01R\xc9\xaa\x02\xe7'\
  b'\xbb\xe7r\xefy\xdfl\xfd\xdf\xfbno{sn\xbb'\
  b'\xa1u\xa7\xdd\xcbvW\xab\xed\xc9\rvk.\xfd\xe0'\
  b'\x8e\xdb\xde4\x07\xbb\xfbx\x81\xf8d]\xd7\xfe\xb5\x07'\
  b'\xaf\xac\xd5\xf5\xf4\xd8\x9a\xb3\xeb\xbe\xdd\xc9\xfasR]'\
  b'\xcf\x87\xc6|\xbb\xa3\x1d\xec\xd9\x9f\xb3\xdb\xb1\xbb\x98\xef'\
  b'\xae\xd9\xfbC};\xb4\xc7\xce\x8d\rL\xdfn\xf4\xc4'\
  b'\xd5\xd9~\xb5\xfdT\xe4\xe7\xf6\x97\xbb\x9c\xf7?\xdd\x0e'\
  b'\xe7\x8b\xbdVX\xca~\x9b\xa1\xf9c\x7f~=\xd4\xbc'\
  b'\xb5\xc6\xb8\x83K\x8b^\xed\xc1\xfa\xdfA\x04\xd5W\xd7'\
  b'\xba\xc0\x841\xec\xdbq\x00l\xe2$\xf5\xff\x8f\xf6\xe0'\
  b'\xf6\xff\xe2\xfa\xabZU\xcf\xb4h}\x95\xa8Q\x9d\x14'\
  b'T\x87V\xb1\xe2\xea\xf2\xba\x01|\xab*5\xdd\xf2\xb1'\
  b'\x87\xcf\xa6\xefc%\xc6\xd3R3*\xbd\x82\xd0y\r'\
  b'\xd3QV\x119F\x82\xaeU\xaf\xd04\x9f5\x1d\x96'\
  b'\xbe\xda\xcf\xea3S\x04\xc5\x10Y~\x88t\xb5\x9d\xc4'\
  b'\x0c\xc3\xfa\xab|\xed\xb0}ZZ;,\x94\x14\xbf\x94'\
  b'\xa3\x1bYL\x08\x10\xba\x98@h$\x7f\x96P\xb2\xf4'\
  b'\xe1j\x15X\x95jHEy~\x109Y\xe7\xab\x07'\
  b"\xed\xa2|\xa2u\x82x\xca'\x1a\n\xa1\xab\xcb\x91\x90"\
  b'\xa5\xaa\x1cA\x9a\xa4*G\xf8jb#d3\xe9['\
  b"j 'b^\xc8t\x94UD\xfa[F\xa3\x9b\x99"\
  b'\rf,\xc675\xc6\xb8c\xb7\xdc\xc7\x9a|\x91\xbf'\
  b'\xfb\x95\xcc\x9f\x02\x8f\xba\xccc}\x89\x19\x0f\xac\x91\x8f'\
  b'\x03\xfel\xfa>\xe9\x80\x05rQ"\xc6\xean\xdf#'\
  b'!\x16\xc6YIU1\x89\xeb\xa2\x16$\xc4E\x8fS'\
  b"\x986-\x9b\xb6\x86\x9c\x14.'\x04F\x15\xea\xc3\xf2"\
  b'\xabB=\x16)\xf8sz)\x9fJ$\x12 t\xa1'\
  b'\x0b\xf4\x8a<\xe5\x82\xe8\x08Y\xe8\x02\xbd\xd4O\xb9 '\
  b'wB\x14\xba@/\xd5\x03\x97\xcd$o\xa9\x193\xe7'\
  b'\x03\x1dU\xf2ULGYE\xa4\xbfc\xf4\x91\x07B'\
  b'\xa2\xc7\x96\xba\xd6\xf7tp~S\xc9\xb6\x80\xa8\xfa\x0e'\
  b'y\x9b~=~\x10H\x1d\x91"=\x82(33"'\
  b'g\x85\xb0i\x157\xc9\x92^@\x94\xb8Crf!'\
  b'sq\x972\xe9\x05B\xf2%\x91\xb3B\xf0T\xfc.'\
  b'\x95\xb4\nQ\x15K"g\x85\xf4\xe9*\x02u\xd2*'\
  b'\xce\xeb\x8c\xc8Y\tX\xcd"E\x92^@\x14\xbdC'\
  b'rf\x12f3\xb2J\x9a\x01Q\xd5\x1d\x923S0'\
  b'\x8b\x17\x9d\x8e!\x08\xc5\x96D\xceJO\xe0\xed{$'\
  b'$\x15\x9a\xd2\xf1s\xd2\x08\x01\x12wU\x17!\x8a,'\
  b'\x91\xdcC\x08\x85\x99\x8cH\x9a6\x03\xa2\xf8\x12\xc9\x9a'\
  b'1\x98\xc5m\xf2\xb4\x19\x10\xa9\x97H\xd6\xac.\xde\x11'\
  b'\xbfSn>\xfe\x03\x98s\xb2\xd6'\
  b'')
# /64_note_midi_over_serial.json size=2197, compressed level=9 wbits=10 compressed size=296
_f3 = const(
  b'(\xcf\x85\x92\xb1\x8a\x840\x10\x86\xfb}\x8a\xc1\xda"'\
  b'\xd1d\x92\xf4\xd7lqO\xb0l!\x1a0\xb0kD'\
  b'\xbd\xe3\x1e\x7f\xa3k\xb1\xcd\xcd/\x082\xdf\x97\x08\x1f'\
  b's\xbb\xdc\xaa!\xae\xfd\x92\xe6-\xe5\xa9\xaa\xa9bC'\
  b'S\xde\xe2J\xdf\xd7\xaf+\xe5\xdf\xb8\xd0\x1a\x97\xd4='\
  b'\xaa{]\xec)\xe69\xfd\xc5GQ\x8d?&\xcf\xd4'\
  b'/y\x1e\xf3\x14\xf7\xe3ok\xeb\xfa1?\xe3\x16\x97'\
  b'\x8fY\xfe\xe9\xc7\xb9\x1b\xca\xc4\x96\x01\x95\xa7L\xcf\xbb'\
  b'k"]\x93V5):\xe1~\xf3\x90\x8e\xf3\xef\xb7'\
  b'\xfcp\xff\x10x\x90\xb9U\x80k\xc0\x1b\xc0[\xc0\r'\
  b'\xe0\x16p\x06\xdc\x01\x0e\xfaY\xd0\x8fA?\x06\xfd\x18'\
  b'\xf4c\xd0\x8fA?\x06\xfd\x18\xf4c\xd0\x8fA?\x06'\
  b'\xfd\x1c\xe8\xe7@?\x07\xfa\xb9\xa3\xdf\xff\xd8\xc8\xd8\xca'\
  b'\x98e\xecd\xece\x1cD\xec\x95\x8c\xb5\x8c\x1b\x19\xcb'\
  b'\xd5\xbc\\\xcd\xcb\xd5\xbc\\\xcd\xcb\xd5<X8\x0f\x16'\
  b'.\x80\x85\x0b`\xe1\x02X\xb8\xd0\x02n\x00\xb7\x803'\
  b'\xe0\x0ep\xd0/\x80~Z)$h$4Hh\x91'\
  b'`\x90`\x91\xc0HpH\xf0H@%5*\xa9\xcf'\
  b'\x92\x97\xfb\x0bE\x15\xab\x11'\
  b'')
# /drumdef.json size=797, compressed level=9 wbits=10 compressed size=266
_f8 = const(
  b'(\xcf\xad\xd2\xcfk\x830\x14\x07\xf0{\xff\x8aG\xce'\
  b'o`\xd4\x97\xd8B\x0e\xb5\x16V\xd8n\xbbI\x11\x8b'\
  b'\xd2\x05\xaaBM\xbbC\xf1\x7f_\xf6C\x1a\xdd\xd6z'\
  b'XN\x81\xbc\xbc|?\xbc\\f`\x17\x0b\x89-\xe0'\
  b'\xc2\xea\xbc*\xed\x86=5o\xf0\xd2T\xf0\xbcI6'\
  b'*$\xb5\xf4\xd5\x12\x11\xcc\xa9.\x0b0\r\xc4;\x86'\
  b'\xf0y\xb3_\xac8\x1ds\xa3\x9b\xda^\x174>\xac'\
  b't\xa1\xb3\x83n\r[\xa4\x10FH\x1c)\xd8\x8e\xab'\
  b'Zsl\xea}\xf6Q\xdc\xda6i(\xb6\xf8k\xc5'\
  b'\xf5-\t\x1d~\x0b\xe4X\xf0`\x1b9\n\xa9b_'\
  b'\xc5\xaeb=P\xb8\x02\xee\n\xdc\xf46\x94M\x1f '\
  b'\t\x14\xdc\x05\xfc\x08o\x89"\xb8\x9b\x1fx\xd4\x03\xc8'\
  b'\x1b\x00\x1e\xf5\xfe\xf5\x9a\x9e<\x95\x04*\x99<\x82\xe8'\
  b'\xc6\x04 \x156\xbdD\x11\xa1\x98\xa3\xe4(\xfd\xbb\xa3'\
  b'\xa0\x08\xa57A\xc3{\x8d\x1c~\xa8\xd5!?\x97\xed'\
  b'\x97E\x92Z\xefHe\xe5\x9f\xa3\x18k\xe4?k\xa6'\
  b'P\xe6\xdd\xac{\x07\xcf\x12\xc4\xf6'\
  b'')
# /pinout.txt size=27
_f6 = const(
  b'data/20_note_Car'\
  b'l_Frei.json'\
  b'')
# /tunelib.json size=3
_f5 = const(
  b'{}\n'\
  b'')
direntries = const(( ( '/20_note_Carl_Frei.json',  ( _f4, True, 891 ) ),
 ( '/26_note_Alderman_Wright.json',  ( _f1, True, 1585 ) ),
 ( '/31_note_Raffin.json',  ( _f0, True, 1588 ) ),
 ( '/35_note_custom.json',  ( _f2, True, 1710 ) ),
 ( '/48_note_custom.json',  ( _f7, True, 4255 ) ),
 ( '/64_note_midi_over_serial.json',  ( _f3, True, 2197 ) ),
 ( '/drumdef.json',  ( _f8, True, 797 ) ),
 ( '/pinout.txt',  ( _f6, False, 27 ) ),
 ( '/tunelib.json',  ( _f5, False, 3 ) ),
))

version = const(2)
date_frozen = const( '2024/12/13 23:37:11' )

sum_size = const(13053)
files_folders = const(9)
import os
import errno
import sys
class _VerbosePrint:
 def __init__( self, module_name, function, silent ):
  self.silent = silent
  self.prefix = f"{module_name}.{function}"
 def print( self, *args ):
  if not self.silent:
   print( self.prefix, *args )
def _file_exists( filename ):
 try:
  open( filename ).close()
  return True
 except:
  return False
def _extract_file( dir_entry, destination ):
 from io import BytesIO
 data = dir_entry[0]
 if not data:
  return
 buffer = bytearray(256)
 stream = BytesIO( data )
 if dir_entry[1]:
  from deflate import DeflateIO, AUTO
  stream = DeflateIO( stream, AUTO, 0, True )
 with open( destination, "wb" ) as outfile:
  while True:
   n = stream.readinto( buffer )
   if n == 0:
    break
   outfile.write( memoryview( buffer )[0:n] )
 stream.close()
def _create_folder( folder, vp ):   
 path = ""
 for p in folder.split("/"):
  path += "/" + p
  path = path.replace("//", "/" )
  try:
   os.mkdir( path )
   vp.print( f"folder {path} created." )
  except Exception as e:
   if type(e) is not OSError or e.errno != errno.EEXIST:
    vp.print( f"folder {path} not created: ", e )
def _extract_all( direntries, target, overwrite, vp ):
 _create_folder( target, vp )
 for filename, dir_entry in direntries:
  dest = (target + filename).replace("//", "/")
  if dir_entry:
   try:
    if overwrite == "never" and _file_exists( dest ):
     vp.print( f"file {dest} exists, not extracted." )
    else:
     vp.print(  f"extracting file {dest}." )
     _extract_file( dir_entry, dest )
   except Exception as e:
    vp.print( f"file {dest} not copied: {e}." )
    raise
  else:
   _create_folder( dest, vp )
def extract_fs( module_name, target, overwrite, silent ):
 module = __import__( module_name )
 if module_name != "__main__":
  del sys.modules[ module_name ]
 vp = _VerbosePrint( module_name, "extract", silent )
 vp.print( f"extracting files to {target}." )
 _extract_all( direntries, target, overwrite, vp )
 return 
extract_fs( __name__, '/data', 'always', False )