# /20_note_Carl_Frei.json size=909, compressed level=9 wbits=10 compressed size=267
_f3 = const(
  b'(\xcf}\xd2Mk\x840\x10\x06\xe0\xfb\xc2\xfe\x87\xc1'\
  b'\xf3"~D\x8d\xe7\x85\x96\x9e\xda\xfb\xb2\x874\x86\x1a'\
  b'\x88\x99\xa0\x16\xba\xff\xbe\t\x8e\xd0\x05;^\x02\xaf\xcf'\
  b'd\xc6\xc4\xdb\xf9t\xcb\x06\xb3\xe8\xd9\x86\xd5\xa2\xcf.'\
  b'\x90U\x05x\\\r\\\xd5\xec\xe0e6\x16\x16\xad\x9c'\
  b'\xc9\xe1\xf5\xe3\xed\x1d\x82\xf5\x0b\xa0w\x8f<\xbb_R'\
  b'\xb57\x18\xec\x8fq\xb1T\xc8-\x9a\xac\x9e1\x8c\xe8'\
  b'M\n\xb7lUz\xc4\xc9\xacfN=\xa8v\xc5o'\
  b"=\x065\xc4\xa8I\t\xc4'\xe5_\xc1b>\xd9\xc1"\
  b'\xc6\x17\xd0&\x1fA\x1d\xd7O\xb5,T\xfbd:2'\
  b'\xf2\x7fS6\x9bi\x0b\xc6P\xaf\xb6\x8a\xab\xd2\x1a\xa7'\
  b'p\xa4\xa8[[\xb3J\x92\x12\x9c\x82]5\xac\xeaI'\
  b'ul\xc7\x82T\xcf\xaarS]\xd2\x93q8<\x8e'\
  b'TE\xaabUMJ\xb0J\x90j\x9e\xd5\xe1m\xef'\
  b'\xd3\xb5\xdc\x8eb\x9f\xaec\xd5\xbeW\xcf*:5Y'\
  b'r\xaa\xa6\x1b\x90\xecy\x08\xfa3${\x1e\x15\xcd%'\
  b'\xff~\xe3\xf9t\xff\x05\xf0\xb9\xec\x9d'\
  b'')
# /26_note_Alderman_Wright.json size=1713, compressed level=9 wbits=10 compressed size=367
_f1 = const(
  b'(\xcf\x8d\xd2Ak\x830\x14\x07\xf0{\xa1\xdf\xe1\x91'\
  b'\xb3t&\xd1D\x8f\xa3\xa7\x1d\n;\x0cv\x90\x1e\\'\
  b'\x0c3\xa0F\xd4\xae\xdb\xb7_2}=\x14:\x9e\xd0'\
  b'"/?_\xe9\xffo\xb5\xdfU\xac\xb1\xb3\x99\xdc\xb8'\
  b'8?\xb0\x84\t\x05\x83_,<w\x8d\x9d\xfazx'\
  b':\xd9\xee\xcb\r\xf0>\xb9\xcfv\x81\xd9\xd4\x9d=\xc0'\
  b'\xdb\xd5\xc3\x8b8\xc2\xc7e\x06[\x9b\x16\xaeni\xc1'\
  b'\x0f\x16N\xc7W!S\xae\xd99\x89\xcb\x07\xebG\xf7'\
  b'm;\x96@V\xac\xa3\xde\x99\xc9\x8fm\xc0q\xb8\xce'\
  b'\x96\xb0\xc3\xf7v\xb1S\x98\xe5\xdb\xcc_L;\xd6M'\
  b'\x98\xb0\xbfm\x10\xaex\xe0\x84\t3^\x84O\xb9\xcd'\
  b'+`\xbd\x19\xd7\x1fN@\n@\x1f\xaf*\x9e\x1dz'\
  b'\xd7\xb8p\x96\xc6m\t@&\xc3Mo;\xdf\xfc\xb0'\
  b'\xc7\x9a\xa3\xce)Z\xa0.(Zn:O):C'\
  b'-(:GM\xfa\x97\nuF\xd1\x1a5)\x93\x02'\
  b'\xb5\xa6\xe8\x12uIj\x07\xcbT\xa4\x089\xb6\xa98'\
  b'\x89c\x9d\x8a\x149\xc7>\x15)E\x8e\x85*R\x8c'\
  b'\x1c\x1bU\xea\x8eW\xcc\t\xb3\x06]n\x8fW\x10\x1f'\
  b'\x152\xe5:\xbeg\xe2\xf1\xda[\x80\xa4vn\xf9\x91'\
  b'\xde\xef[|\xa4.1=M\xaa\x12\xc3\xd3\xa4&1'\
  b';M*R\xa1\x96\x14\xadQ\x93Z/P+\x8a.'\
  b'Q\xd3\xda\xc12\xe3\x17\xfb\x0fr*\x14T(\xa90'\
  b'\xa3\xc2\xfc\x0e\xc2~w\xde\xef~\x01R\x03\x86w'\
  b'')
# /31_note_Raffin.json size=1716, compressed level=9 wbits=10 compressed size=360
_f0 = const(
  b'(\xcf\x8d\x92\xc1j\x840\x10\x86\xef\x0b\xfb\x0eC\xce'\
  b'\xb2\x98D\x93x\xdeS\x0f\xa5\xa5W\xd9\x83\x8dY\x0c'\
  b'h"\xea\xd2\xf6\xed\x9b\xec:=ua\x04A\xfe\xf9'\
  b'\x1c\xe2\xff\xd9\x1e\x0f-\xeb\xddj\x17?o>\x06V'\
  b'0\xc9!\xc4\xcd\xc1Gw\xbd\xfa\x00\xab\xedFw\x82'\
  b'\xb7\xe0\xe0E\x9c\xe1\xf3\xb6\xc2\x97\xdf\x06\x10\xf0z~'\
  b'\x17\xb2\xe4\x1al\x0c\xdb\x12\xc7\xd1-+\xbb\x14yc'\
  b'pq\xf6\xdfnd\x05T\xe6\x11M\xde.q\x1eb'\
  b'p9|d[g\x878\xb9\xcd-)\xab\xf7,\xde'\
  b'\xec0w}J\xd8}\x1b\xa4+\x0f\xbc\xb0)\xe3&'\
  b'\xdd\xcd\x9e\xb7\xc0&;\xdf\x0f\x91FR\x00\xf2\xf9j'\
  b'\xf3\xec4\xf9\xde\xa7Y\x99\xb7\x15\x00\x95J\x0f\x93\x1b'\
  b'c\xff\xc3\x9e\xd3\x1ciC\xa1\xc5N\xd7\x9cBK\xa4'\
  b'%\x85\xae\x90&\x9d\xbbF\x9atn\xb5\xd3\xaa\xa4\xd0'\
  b'\x1ai\xd2W\x1a\xa4\x05\x85n\x90&u\xc2Q\xa6\xaa'\
  b'H8\xdaT5\tG\x9dJ\x93p\xf4\xa9H\x9ds'\
  b'\x14\xaa\x1a\x12\x8eF\xf5?\x8eZ\xc8\xa8\x90%\xd7\xf9'\
  b'\xbf\x92\xcf\xd7`a\x9ad\x03\xfb\xd2$\x1bX\x97&'\
  b'\xc9\xc0\xb64\xc9\x05\x96\xa5\x15\x85\xfe\xeb\x8a$N!'\
  b'M\xf2\xa6\x91&i3;mJ\n\xdd \xcdIv'\
  b'P\xa6\xa1\xc9D\x9b\x86\xe4\x87\xa3NC\x12\xc4\xd1\xa7'\
  b'!\x19\xe2(\xd4\x90\x14\xf1\xdd\xe8\xfd\x15\x96@8\x1e'\
  b'.\xc7\xc3/\xd9\xab\x8c\xbd'\
  b'')
# /35_note_custom.json size=1444, compressed level=9 wbits=10 compressed size=339
_f2 = const(
  b'(\xcf\x8d\x92\xddn\x84 \x10F_\xc5pm\x1aQ'\
  b'\x19\xf0Y6{a\x91T\x12\x15\xa2l\xd2\xbe}Q'\
  b'\xc6\xed\xfe\x84I/\x8c\xc9p\x98aN\xbe\xcb\x85\r'\
  b'f\xd3\xab\xf5\xc1\xba\x85\x95\x05kD\xb1\xb8`\n}'\
  b'\xdb\x82\x9b\x8bM\xf7\x93a\xd7\xb2\xb8\xb0\xc58o\xbf'\
  b'\xcd\x14\xa9V\x1d\x95\xd9\xea\xd5\xf9\xd1-&\xd6xu'\
  b'\xd4B\xafG7\x9b`\xd6\xbd[\xba\x19\xdcM\x8f\xbe'\
  b'\x1fb\xa5;\n_\xde\xba\x8f\xd9\x0ev\xbf\xd7\xec\\'\
  b'Y\xc8:\xfeg3\xb9\xe1\x87\xbdC-B\x9c\x82d'\
  b'\x82\xd8\xdf\xe4\xa7c\x95\x8e\xc4\xde\xe3\xb3\xdf\xb6\x84\xd8'\
  b'Z\xef\x87\xb1\xc8\xeb\xb4\x95\xf6uSq\x19\xab\xcd\xbd'\
  b'r6\xa9R\x0f%^\xde\xf1\x80pD\x9a<R\xe3'\
  b'6\x04rZ\xa9\xf2\x08:Q<\x8f\x08\xec"\xf3\x08'\
  b' \xd2\xe5\x11\xf4*\x89\xa5\xd1\xad"\x06u\x88\x00\xa1'\
  b'\x0e\xf5\xca\x96`\xd0\xaf\xa4\xfa\xa0`E\xf5A\xc3\x8a'\
  b'0|\x8f\x9d"\x18t\xac^\xf3\x8b\xc1\x8a\xc7\x1c\xfe'\
  b'\x1d,\xd8_\xd5k\xedf\x9f\x0b\x16\xb4y\x04\xf7\x16'\
  b'\xea)\xe2\xef\xb1\x12\x90\x03p\xe3\xf4e\xe2$\x88G'\
  b'b\x9c\xda\xec\x00\x0cS\x9b}"F\t\xea\xfc\x10\x8c'\
  b'\x12pB\xd6)T\x11\xcci\xb4"\x18T\n\x82`'\
  b'\xd0*t\x04\x83bA\x12\x0c\xfa\x05x`\xae\xbf\xdf'\
  b'ez\xb5'\
  b'')
# /pinout.txt size=27
_f4 = const(
  b'data/20_note_Car'\
  b'l_Frei.json'\
  b'')
direntries = const(( ( '/20_note_Carl_Frei.json',  ( _f3, True, 909 ) ),
 ( '/26_note_Alderman_Wright.json',  ( _f1, True, 1713 ) ),
 ( '/31_note_Raffin.json',  ( _f0, True, 1716 ) ),
 ( '/35_note_custom.json',  ( _f2, True, 1444 ) ),
 ( '/pinout.txt',  ( _f4, False, 27 ) ),
))

version = const(2)
date_frozen = const( '2023/11/06 22:46:52' )

sum_size = const(5809)
files_folders = const(5)
import os
import errno
import sys
class _VerbosePrint:
 def __init__( self, module_name, function, silent ):
  self.silent = silent
  self.prefix = f"{module_name}.{function}"
 def print( self, *args ):
  if not self.silent:
   print( self.prefix, *args )
def _file_exists( filename ):
 try:
  open( filename ).close()
  return True
 except:
  return False
def _extract_file( dir_entry, destination ):
 from io import BytesIO
 data = dir_entry[0]
 if not data:
  return
 buffer = bytearray(256)
 stream = BytesIO( data )
 if dir_entry[1]:
  from deflate import DeflateIO, AUTO
  stream = DeflateIO( stream, AUTO, 0, True )
 with open( destination, "wb" ) as outfile:
  while True:
   n = stream.readinto( buffer )
   if n == 0:
    break
   outfile.write( memoryview( buffer )[0:n] )
 stream.close()
def _create_folder( folder, vp ):   
 path = ""
 for p in folder.split("/"):
  path += "/" + p
  path = path.replace("//", "/" )
  try:
   os.mkdir( path )
   vp.print( f"folder {path} created." )
  except Exception as e:
   if type(e) is not OSError or e.errno != errno.EEXIST:
    vp.print( f"folder {path} not created: ", e )
def _extract_all( direntries, target, overwrite, vp ):
 _create_folder( target, vp )
 for filename, dir_entry in direntries:
  dest = (target + filename).replace("//", "/")
  if dir_entry:
   try:
    if overwrite == "never" and _file_exists( dest ):
     vp.print( f"file {dest} exists, not extracted." )
    else:
     vp.print(  f"extracting file {dest}." )
     _extract_file( dir_entry, dest )
   except Exception as e:
    vp.print( f"file {dest} not copied: {e}." )
    raise
  else:
   _create_folder( dest, vp )
def extract_fs( module_name, target, overwrite, silent ):
 module = __import__( module_name )
 if module_name != "__main__":
  del sys.modules[ module_name ]
 vp = _VerbosePrint( module_name, "extract", silent )
 vp.print( f"extracting files to {target}." )
 _extract_all( module.direntries, target, overwrite, vp )
 return 
extract_fs( __name__, '/data', 'always', False )